import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as p,a as n,b as o,d as c,f as i}from"./app-C5C4XUpG.js";const l={},u=i(`<h1 id="篇章1" tabindex="-1"><a class="header-anchor" href="#篇章1"><span>篇章1</span></a></h1><h3 id="防抖-节流" tabindex="-1"><a class="header-anchor" href="#防抖-节流"><span>防抖 节流</span></a></h3><h4 id="防抖-延迟一定时间执行某一方法-如果重新触发时间重置" tabindex="-1"><a class="header-anchor" href="#防抖-延迟一定时间执行某一方法-如果重新触发时间重置"><span>防抖： 延迟一定时间执行某一方法，如果重新触发时间重置</span></a></h4><h4 id="节流-是规定时间内多次触发方法只执行一次" tabindex="-1"><a class="header-anchor" href="#节流-是规定时间内多次触发方法只执行一次"><span>节流： 是规定时间内多次触发方法只执行一次</span></a></h4><h4 id="区别-一个是立即执行规定时间内不重复执行-一个是规定时间内只执行一次-其实区别可以不用回答-介绍防抖和节流就包含了区别" tabindex="-1"><a class="header-anchor" href="#区别-一个是立即执行规定时间内不重复执行-一个是规定时间内只执行一次-其实区别可以不用回答-介绍防抖和节流就包含了区别"><span>区别: 一个是立即执行规定时间内不重复执行，一个是规定时间内只执行一次，其实区别可以不用回答，介绍防抖和节流就包含了区别</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 防抖</span>
  <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">.</span><span class="token punctuation">.</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 节流</span>
  <span class="token keyword">function</span> <span class="token function">throttle</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">.</span><span class="token punctuation">.</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span>
      timer <span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="超出文本省略css和js的实现方式-考虑兼容性" tabindex="-1"><a class="header-anchor" href="#超出文本省略css和js的实现方式-考虑兼容性"><span>超出文本省略css和js的实现方式, 考虑兼容性</span></a></h3><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* 单行 */</span>
 <span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 多行*/</span>
 <span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js-js实现文字超出隐藏其-核心逻辑就是循环添加文字-添加完之后判断滚动高度-scrollheight-是否大于可视高度-offsetheight-如果大于就把后面三个字符替换成" tabindex="-1"><a class="header-anchor" href="#js-js实现文字超出隐藏其-核心逻辑就是循环添加文字-添加完之后判断滚动高度-scrollheight-是否大于可视高度-offsetheight-如果大于就把后面三个字符替换成"><span>JS: js实现文字超出隐藏其 核心逻辑就是循环添加文字 添加完之后判断滚动高度(scrollHeight) 是否大于可视高度 (offsetHeight) 如果大于就把后面三个字符替换成...</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">textHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本&#39;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetHeight <span class="token operator">&lt;</span> box<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">{</span>
        box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;...&#39;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> box<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序"><span>排序</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 请将数组排序从小到大</span>
  <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span>
  array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;排序后的数组&#39;</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是柯里化函数-你对柯里化了解多少" tabindex="-1"><a class="header-anchor" href="#什么是柯里化函数-你对柯里化了解多少"><span>什么是柯里化函数，你对柯里化了解多少？</span></a></h3><h4 id="柯里化-柯里化是一个高阶函数-它可以将多个形参的函数转成单一的形参的函数" tabindex="-1"><a class="header-anchor" href="#柯里化-柯里化是一个高阶函数-它可以将多个形参的函数转成单一的形参的函数"><span>柯里化： 柯里化是一个高阶函数,它可以将多个形参的函数转成单一的形参的函数</span></a></h4><h4 id="代码实现-其实柯里化函数的核心点主要在args-length和fn-length的判断-当传入的参数个小小于原始函数的参数个数-则继续柯里化" tabindex="-1"><a class="header-anchor" href="#代码实现-其实柯里化函数的核心点主要在args-length和fn-length的判断-当传入的参数个小小于原始函数的参数个数-则继续柯里化"><span>代码实现:其实柯里化函数的核心点主要在args.length和fn.length的判断，当传入的参数个小小于原始函数的参数个数，则继续柯里化</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> _args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>_args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token operator">...</span>_args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json-parse和json-stringify的实现" tabindex="-1"><a class="header-anchor" href="#json-parse和json-stringify的实现"><span>Json.parse和Json.stringify的实现</span></a></h3><h5 id="json-stringify-是将对象或值转换为json字符串-json-parse-解析json-字符串-就是把json字符串转成对象" tabindex="-1"><a class="header-anchor" href="#json-stringify-是将对象或值转换为json字符串-json-parse-解析json-字符串-就是把json字符串转成对象"><span>json.stringify() 是将对象或值转换为JSON字符串 ; json.parse() 解析JSON 字符串，就是把JSON字符串转成对象</span></a></h5>`,19),r={href:"https://zhuanlan.zhihu.com/p/638767443",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const s=t("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",r,[o("具体答案：一文彻底弄懂JSON.parse()与JSON.stringify()"),c(s)])])])}const b=a(l,[["render",k],["__file","01.篇章1.html.vue"]]),f=JSON.parse('{"path":"/posts/Study/01.%E7%AF%87%E7%AB%A01.html","title":"篇章1","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-27T00:00:00.000Z","category":["篇章1"],"tag":["防抖 节流 css"],"star":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":3,"title":"防抖 节流","slug":"防抖-节流","link":"#防抖-节流","children":[]},{"level":3,"title":"超出文本省略css和js的实现方式, 考虑兼容性","slug":"超出文本省略css和js的实现方式-考虑兼容性","link":"#超出文本省略css和js的实现方式-考虑兼容性","children":[]},{"level":3,"title":"JS: js实现文字超出隐藏其 核心逻辑就是循环添加文字 添加完之后判断滚动高度(scrollHeight)  是否大于可视高度 (offsetHeight)  如果大于就把后面三个字符替换成...","slug":"js-js实现文字超出隐藏其-核心逻辑就是循环添加文字-添加完之后判断滚动高度-scrollheight-是否大于可视高度-offsetheight-如果大于就把后面三个字符替换成","link":"#js-js实现文字超出隐藏其-核心逻辑就是循环添加文字-添加完之后判断滚动高度-scrollheight-是否大于可视高度-offsetheight-如果大于就把后面三个字符替换成","children":[]},{"level":3,"title":"排序","slug":"排序","link":"#排序","children":[]},{"level":3,"title":"什么是柯里化函数，你对柯里化了解多少？","slug":"什么是柯里化函数-你对柯里化了解多少","link":"#什么是柯里化函数-你对柯里化了解多少","children":[]},{"level":3,"title":"Json.parse和Json.stringify的实现","slug":"json-parse和json-stringify的实现","link":"#json-parse和json-stringify的实现","children":[]}],"git":{"createdTime":1711508155000,"updatedTime":1711508644000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":2}]},"readingTime":{"minutes":1.87,"words":560},"filePathRelative":"posts/Study/01.篇章1.md","localizedDate":"2024年3月27日"}');export{b as comp,f as data};
