import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as r,e as s,a as l,b as i,d as a,f as n}from"./app-D5qqsylS.js";const c={},d=n('<h1 id="篇章8" tabindex="-1"><a class="header-anchor" href="#篇章8"><span>篇章8</span></a></h1><h2 id="从-url-输入地址到最终网页渲染-中间发生了什么-浏览器从输入到渲染的过程经历哪些过" tabindex="-1"><a class="header-anchor" href="#从-url-输入地址到最终网页渲染-中间发生了什么-浏览器从输入到渲染的过程经历哪些过"><span>从 url 输入地址到最终网页渲染，中间发生了什么 / 浏览器从输入到渲染的过程经历哪些过</span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>DNS解析（查询）：将域名地址解析成ip地址 <ul><li>浏览器DNS解析</li><li>计算机DNS解析</li><li>路由器DNS解析</li><li>网络运行商DNS解析</li><li>递归查询</li></ul></li><li>TCP链接： TCP三次握手 <ul><li>客户端发送服务端：我准备好了，请你准备一下</li><li>服务端发送客户端：我也准备好了，请你确认一下</li><li>客户端发送服务端： 确认完毕</li></ul></li><li>发送请求 <ul><li>将请求报文发送过去</li></ul></li><li>返回响应 <ul><li>将响应报文发送过来</li></ul></li><li>渲染页面 <ul><li>遇到HTML，调用HTML解析器，解析成DOM树</li><li>遇到CSS，调用CSS解析器，解析成CSSOM树</li><li>遇到JS,调用JS解析器（JS引擎），解析JS代码 <ul><li>可能要修改元素节点，重新调用HTML解析器，解析成新的DOM树</li><li>可能要修改样式节点，重新调用CSS解析器，解析成新的CSSOM树</li></ul></li><li>将DOM + CSSOM = render树（渲染树）</li><li>layout布局：计算元素位置和大小信息 render渲染：将颜色渲染上去</li></ul></li><li>断开链接：TCP四次挥手 <ul><li><p>断开请求链接2次</p></li><li><p>断开响应链接2次</p></li><li><p>客户端发送服务端：请求数据发送完毕，可以断开了</p></li><li><p>服务端发送客户端：请求数据接收完毕，可以断开了</p></li><li><p>服务端发送客户端：响应数据发送完毕，可以断开了</p></li><li><p>客户端发送服务端：响应数据接收完毕，可以断开了</p></li></ul></li></ul></div>',3),h=n(`<h2 id="localstorage-sessionstorage-cookie" tabindex="-1"><a class="header-anchor" href="#localstorage-sessionstorage-cookie"><span>Localstorage / Sessionstorage / Cookie</span></a></h2><div class="hint-container info"><p class="hint-container-title">Localstorage / Sessionstorage / Cookie 区别</p><ul><li><p>存储大小</p><ul><li>cookie数据大小不能超过4k ；</li><li>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大；</li></ul></li><li><p>有效时间</p><ul><li>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭；</li><li>sessionStorage 数据在当前浏览器窗口关闭后自动删除；</li><li>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；</li></ul></li><li><p>数据与服务器之间的交互方式</p><ul><li>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端；</li><li>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存；</li></ul></li><li><p>数据共享与独立性</p><ul><li>cookie 对同一域名下的网站可以共享cookie数据</li><li>sessionStorage 数据在不同的窗口或标签页之前不共享</li><li>localStorage 在整个浏览器实例中共享数据，无论打开多少个窗口或标签页，都可以访问到相同localStorage数据</li></ul></li><li><p>使用场景</p><ul><li>cookie适用于需要在客户端与服务端之前传递小量数据的场景；如身份验证和会话管理</li><li>sessionStorage适用于同一浏览器窗口或者标签页中存储临时数据的场景</li><li>localStorage 适用于需要在客户端长期存储大量数据的场景</li></ul></li></ul><!-- - 作用域
      -  localStorage的作用域限制在文档源的；
      -  localStorage同源的文档之间可以相互访问和修改相同名称的数据；
      -  localStorage受浏览器厂商的限制，chrome下存储的数据，360浏览器下不可访问； 会得到‘Invalid Date’；
      -  sessionStorage在localStorage的同源策略基础之上，还有更严格的限制：
          - 他还被限制在窗口中，意思是同一个窗口或标签页的不同页面之间可以共享sessionStorage；
          -  但是不同的窗口或标签页之间不能共享sessionStorage，即便他们是同一个页面地址；
          -  这里的窗口是顶级窗口，如果里面有多个iframe，他们之间共享sessionStorage； --></div><h2 id="浏览器的宏任务与微任务是什么" tabindex="-1"><a class="header-anchor" href="#浏览器的宏任务与微任务是什么"><span>浏览器的宏任务与微任务是什么</span></a></h2><div class="hint-container info"><p class="hint-container-title">宏任务与微任务</p><p>微任务优先于宏任务</p><ul><li>宏任务 <ul><li>宏任务是由浏览器发起的任务，通常包括整体代码、setTimeout、setInterval、I/O 操作等。</li><li>宏任务会被添加到宏任务队列中，等待浏览器的执行</li><li>宏任务执行完毕后，会清空微任务队列</li></ul></li><li>微任务 <ul><li>微任务是在宏任务执行完毕后立即执行的任务。微任务通常包括 Promise 的回调、MutationObserver 等</li><li>微任务队列有自己的执行时机，在每个宏任务执行完毕后，会检查微任务队列并执行其中的所有任务。</li></ul></li></ul></div><h2 id="事件循环-eventloop" tabindex="-1"><a class="header-anchor" href="#事件循环-eventloop"><span>事件循环 EventLoop</span></a></h2><div class="hint-container info"><p class="hint-container-title">事件循环(EventLoop)的理解</p><ul><li><p>事件循环是JavaScript中一种用于处理异步操作的机制；它是JavaScript单线程执行模型的核心部分，负责协调和处理任务的执行顺序 javaScript是一门单线程语言，意味着它只有一个主程序来执行代码，然后实际开发中，我们经常会遇到需要处理异步任务的情况。比如网络请求、定时器和事件处理等，为了不阻塞主线程执行，javaScript引入了事件循环机制</p></li><li><p>事件循环的基本原理如下</p><ul><li>执行栈： js代码执行过程中会使用一个执行栈来记录函数调用顺序和位置，当执行一个函数时，它会被推入执行栈，当函数执行完成，会从执行栈中弹出</li><li>任务队列： 异步任务完成时，会被放入任务队列中等待执行，常见的异步任务包括定时器回调函数、网络请求的回调函数、事件处理函数等</li><li>事件循环：事件循环是一个持续运行的过程，它不断地检查执行栈和任务队列状态，并根据一定的规则将任务队列推入执行栈中执行</li></ul></li></ul></div><h2 id="为什么要减少dom操作中的重绘重排" tabindex="-1"><a class="header-anchor" href="#为什么要减少dom操作中的重绘重排"><span>为什么要减少DOM操作中的重绘重排</span></a></h2><div class="hint-container info"><p class="hint-container-title">减少重绘重排（优化前端与服务器之间通讯性能）</p><p>基础概念</p><ul><li>DOM是JS操作HTML的接口，属于前端入门知识，同时也是前端开发的核心基础和重要基石</li><li>因为前端大部分功能都是需要通过dom来实现的，比如 动态渲染列表、用户交互响应、表格表单处理、数据可视化以及复杂的动画和过渡效果</li></ul><p>前端与服务器之前性能问题如何产生的</p><ul><li>浏览器包括渲染引擎（浏览器内核）和JS引擎且它们都是单线程引擎，单线程有很大优势，比如开发方面避免了多线程的死锁、竞争等问题；劣势是失去了并发能力</li><li>浏览器为了避免两个引擎同时修改页面而造成渲染的结果不一致情况，会让这两个引擎具有互斥性，也就是说在某个时刻这两个引擎只有一个在运行，另一个会被阻塞</li><li>浏览器的这种互斥性机制是为了确保页面在渲染和执行js代码时的一致性和稳定性。举个例子（假设一个页面中有一个动态更新元素，这个元素内容是通过js定期修改的同时浏览器也在不断的重新渲染这个页面以反映其他元素变化）如果没有引擎互斥机制就有可能出现js引擎正在修改这个元素内容的同时，渲染引擎也开始重新渲染页面，导致渲染结果不够准确或者比较混乱。</li><li>但是由于浏览器引擎的互斥性当js引擎正在修改元素内容时，渲染引擎会被阻塞，直到js引擎完成修改随后渲染引擎才会重新渲染页面，确保页面内容的一致性和准确性</li><li>从js引擎切换到渲染引擎执行对应操作然后再切换为js引擎继续执行这就带来了性能损耗；单次性能损耗是非常少的，但是如果频繁的大量切换就会产生性能问题，既然产生了性能问题？那该如何解决，答案就是重绘重排， 因为重绘重排在渲染过程是最耗时的</li></ul><p>什么是重绘重排？</p><ul><li>浏览器渲染页面时会将HTML和CSS解析成DOM树和CSS规则树，然后再合并排布最后绘制成我们可见的页面</li><li>如果在操作DOM时需要重新计算几何属性，比如宽度、高度、位置等就会引起渲染引擎重新计算，从而影响元素的排布操作这种操作称为重排</li><li>重排之后浏览器会根据新的样式规则绘制元素而绘制的过程称为重绘</li><li>重排的发生会伴随重绘，但重绘不一定需要重排，比如修改背景图片、修改字体颜色等</li><li>因此在优化DOM操作时我们尽量避免触发重排，特别是那些影响其他元素排布的情况</li></ul></div><h2 id="get和post" tabindex="-1"><a class="header-anchor" href="#get和post"><span>get和post</span></a></h2><div class="hint-container info"><p class="hint-container-title">get和post</p><p>浅易理解get是从服务端获取数据，post是像服务端发送数据</p><p>get和post方法的区别</p><ul><li>1：get和post都是http请求的方法，而http又是基于tcp/ip的应用层通讯协议，所以本质上来说get和post请求是没有区别的，都是tcp链接，他们能做的事情都是一样的，换言之get能做的事情post也可以做，反之亦可</li><li>2： http提供的这两种方法也是在特定情况下区分应用 <ul><li>第一 在参数位置方面 get请求的参数是放在url里面的，而post请求参数是放在请求体里面的，当然post请求参数也可以放置在url中，也就意味着get请求参数可以在浏览器地址栏中看到，而post请求的参数不会</li><li>第二 在参数长度方面 get请求参数由于由于是在url里面，所以会受到浏览器长度的限制，浏览器的不同长度的数值也不同；而post请求则没有这方面限制，因为请求体的大小理论上是可以非常大的</li><li>第三 浏览器缓存方面 get请求可以被浏览器缓存而post请求不能够被缓存，这意味着在多次发起相同get请求时浏览器可能会直接返回缓存的结果，而post请求每次都会与服务器交互</li><li>第四 浏览器访问方面 get请求可以通过浏览器直接访问 支持刷新后退，而post请求是不能够被浏览器直接访问的，刷新后数据会重新发送</li><li>第五 参数安全性方面 get请求参数可见且可能被缓存因此其安全性相对较低，而post请求参数隐藏在请求体中且不会被缓存因此安全性更高一些</li><li>第六 在RESTful架构中 在该架构中get扮演的获取数据的角色，而post扮演的添加数据的角色，所以get对数据是无害的不会对数据资源造成影响，而post使用不当有可能对原有数据源造成伤害</li></ul></li></ul></div><h2 id="说说网络错误码有哪些-分别代表什么意思" tabindex="-1"><a class="header-anchor" href="#说说网络错误码有哪些-分别代表什么意思"><span>说说网络错误码有哪些？ 分别代表什么意思</span></a></h2><h4 id="网络错误码-以下前缀开发头代表不同的错误" tabindex="-1"><a class="header-anchor" href="#网络错误码-以下前缀开发头代表不同的错误"><span>网络错误码：以下前缀开发头代表不同的错误</span></a></h4><ul><li>1 开头表示消息</li><li>2 开头 表示成功</li><li>3 表示重定向</li><li>4 表示客户端错误</li><li>5 表示服务器错误</li></ul><h5 id="_1xx段-表示请求已被接受-需要继续处理。这类响应是临时响应-只包含状态行和某些可选的响应头信息" tabindex="-1"><a class="header-anchor" href="#_1xx段-表示请求已被接受-需要继续处理。这类响应是临时响应-只包含状态行和某些可选的响应头信息"><span>1XX段：表示请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息</span></a></h5><p>常见的有：</p><ul><li>100(客户端继续发送请求，这是临时响应)</li><li>101(服务器根据客户请求切换协议)</li></ul><h5 id="_2xx段-表示请求已成功被服务器接收、理解、并接受" tabindex="-1"><a class="header-anchor" href="#_2xx段-表示请求已成功被服务器接收、理解、并接受"><span>2xx段： 表示请求已成功被服务器接收、理解、并接受</span></a></h5><p>常见的有：</p><ul><li>200（成功）： 请求已成功，并且返回所希望的响应头和数据体</li><li>201 (已创建): 请求成功并且服务器创建了新的资源</li><li>202 （已创建）： 服务器已接收请求，但是尚未处理完成</li><li>203（非授权信息）: 服务器已成功处理请求,但返回的信息可能来自另一来源</li><li>204(无内容)： 服务器成功处理请求，但无返回内容</li><li>205(重置内容)： 服务器成功处理请求，但没有任何返回内容</li><li>206(部分内容)： 表示服务器成功处理了部分请求，通常在断电续传或者分块下载使用</li></ul><h5 id="_3xx段-表示完成请求-需要进一步操作。" tabindex="-1"><a class="header-anchor" href="#_3xx段-表示完成请求-需要进一步操作。"><span>3xx段： 表示完成请求，需要进一步操作。</span></a></h5><p>常见的有：</p><ul><li>300（多种选择）：针对请求，服务器可执行多种操作</li><li>301(永久移动)： 请求的页面已永久移动到新位置</li><li>302(临时移动): 服务器目前从不同位置的页面响应请求</li><li>303(查看其它位置)： 请求者应对不同的位置单独使用get请求来检索响应</li><li>304(协商缓存)： 服务器通过状态304可以告诉客户端请求资源成功</li><li>305 （使用代理）： 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理</li><li>307 （临时重定向）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li></ul><h5 id="_4xx段-表示服务器无法处理请求-客户端错误" tabindex="-1"><a class="header-anchor" href="#_4xx段-表示服务器无法处理请求-客户端错误"><span>4xx段： 表示服务器无法处理请求，客户端错误</span></a></h5><p>常见的有：</p><ul><li>400（错误请求）： 服务器不理解请求的语法</li><li>401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li>403（禁止）： 服务器拒绝请求</li><li>404（未找到）： 请求的资源不存在</li><li>405（方法禁用）： 禁用请求中指定的方法</li><li>406（不接受）： 无法使用请求的内容特性响应请求的网页</li><li>407（需要代理授权）： 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理</li><li>408（请求超时）： 服务器等候请求时发生超时</li></ul><h5 id="_5xx段-表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生" tabindex="-1"><a class="header-anchor" href="#_5xx段-表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生"><span>5xx段： 表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生</span></a></h5><p>常见的有：</p><ul><li>500（服务器内部错误）：服务器遇到错误，无法完成请求</li><li>501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li><li>502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应</li><li>503（服务不可用）： 服务器目前无法使用（由于超载或停机维护）</li><li>504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li><li>505（HTTP 版本不受支持）： 服务器不支持请求中所用的 HTTP 协议版本</li></ul><h2 id="如何解决页面刷新丢失数据的问题" tabindex="-1"><a class="header-anchor" href="#如何解决页面刷新丢失数据的问题"><span>如何解决页面刷新丢失数据的问题？</span></a></h2><ul><li>通过本地储存解决 localStorage 或 sessionStorage 存储</li><li>或通过插件 vuex-persistedstate 解决</li></ul><h2 id="单点登录" tabindex="-1"><a class="header-anchor" href="#单点登录"><span>单点登录</span></a></h2><div class="hint-container info"><p class="hint-container-title">单点登录</p><p>多系统，单一位置登录，实现多系统同时登录的一种技术 （前后端分离的 session id 或token保存在localStorage中）</p><ul><li>Cookie+ Session。 <ul><li>用户登录后，认证服务器会将用户信息存储在Session中，并生成一个Session ID。</li><li>这个Session ID会存储在Cookie中返回给用户。当用户访问其他应用系统时，系统会检查Cookie中的Session ID。</li><li>认证服务器通过这个ID来判断用户是否已经登录，如果已登录，则返回一个新的Session ID给应用系统；否则，需要用户重新登录。</li></ul></li><li>Token <ul><li>用户登录后，认证服务器会生成一个Token，并将其存储在共享的存储（如Redis、数据库等）中。</li><li>然后，这个Token会返回给用户。</li><li>当用户访问其他应用系统时，系统会向认证服务器发送请求，并带上这个Token。</li><li>认证服务器通过Token来验证用户是否已登录，如果已登录，则返回一个新的Token给应用系统；否则，需要用户重新登录</li></ul></li><li>LocalStorage跨域。 <ul><li>在前后端分离的场景下，可以将Session ID或Token保存到浏览器的LocalStorage中。</li><li>前端在每次发送请求时，可以将LocalStorage中的数据传递给服务端。</li><li>这样，单点登录可以在前端实现，并允许Session ID或Token在多个域下共享。</li></ul></li></ul></div><h2 id="ssr实现原理" tabindex="-1"><a class="header-anchor" href="#ssr实现原理"><span>SSR实现原理</span></a></h2><p>vue.js的ssR是一种在服务器上预渲染Vue.js应用程序的技术。</p><ul><li>服务器接收请求：当服务器接收一个请求时，它会创建一个新的Vue实例。</li><li>创建渲染器：使用vue-server-renderer包创建一个渲染器。</li><li>渲染页面：服务器使用渲染器将Vue实例渲染为Html字符串。</li><li>发送响应：服务器将渲染后的Html字符串作为响应发送给客户端。</li><li>客户端接收响应：客户端接收到服务器的响应后，将HTML字符串解析为DOM并显示给用户。</li><li>激活(Hydration): Vue在客户端创建一个新的Vue实例，将其挂载到服务器收到的Dom上</li></ul><h2 id="ssr渲染流程是什么样" tabindex="-1"><a class="header-anchor" href="#ssr渲染流程是什么样"><span>SSR渲染流程是什么样？</span></a></h2><ul><li>客户端发送URL请求到服务端</li><li>服务端查询数据库</li><li>拿到数据,组合好页面</li><li>服务端返回整个DOM结构给客户端</li></ul><h2 id="diff算法" tabindex="-1"><a class="header-anchor" href="#diff算法"><span>diff算法</span></a></h2><div class="hint-container info"><p class="hint-container-title">diff算法概念</p><ul><li>Vue和React都是基于vdom的前端框架，组件渲染会返回vdom，渲染器再把vdom通过增删改的api同步到dom，</li><li>当再次渲染的时候，会产生新的vdom，渲染器会对比两颗vdom树，对有差异部分通过增删改的api更新到dom</li><li>这里对比两颗vdom树，找到有差异部分的算法，就叫做diff算法</li></ul></div><div class="hint-container info"><p class="hint-container-title">简单diff算法</p><ul><li>diff算法的目的是根据key复用dom节点，通过移动节点而不是创建节点来减少dom操作</li><li>对于每个新的vnode，在旧的vnode中根据key查找一下，如果没查找到，那就新增dom节点，如果查找到了，那就可以复用</li><li>复用的话要不要移动要判断下下标，如果下标在lastIndex之后，就不需要移动，因为本来就在后面，反之就需要移动</li><li>最后，把旧的vnode中在新vnode中没有的节点从dom树中删除</li></ul></div><div class="hint-container info"><p class="hint-container-title">双端diff算法 vue2使用的</p><ul><li>双端diff 是头尾指针向中间移动的同时，对比头头、尾尾、头尾、尾头是否可以复用，如果可以的话就移动对应dom节点</li><li>如果头尾没找到可复用节点就遍历vnode数组来查找，然后移动对应下标的节点到头部</li><li>最后还剩下旧的vnode就批量删除，剩下的vnode就批量新增</li></ul></div><div class="hint-container info"><p class="hint-container-title">快速diff算法 vue3</p><ul><li>在vue2双端diff的基础上增加了最长递增子序列的逻辑</li><li>整体核心思路：复用，能不动就不动，能少移动就少移动，直接创建或者直接删除。 步骤 <ul><li>针对新旧子节点的前置节点、后置节点进行预处理</li><li>预处理完毕，判断是否有节点需要新增/卸载</li><li>如果不存在节点需要新增/卸载，判断是否有节点需要进行移动操作</li><li>如果存在需要移动的节点情况，即moved为true</li></ul></li></ul></div>`,42),u={href:"https://juejin.cn/post/7114177684434845727?searchId=202404071153522975C2613D0C207BD41C",target:"_blank",rel:"noopener noreferrer"},g=n('<h2 id="后台系统中权限是实现到什么等级-具体怎么实现的" tabindex="-1"><a class="header-anchor" href="#后台系统中权限是实现到什么等级-具体怎么实现的"><span>后台系统中权限是实现到什么等级? 具体怎么实现的</span></a></h2><h4 id="目前大多数是实现到按钮级-实现的方法是通过自定义指令" tabindex="-1"><a class="header-anchor" href="#目前大多数是实现到按钮级-实现的方法是通过自定义指令"><span>目前大多数是实现到按钮级,实现的方法是通过自定义指令</span></a></h4><h5 id="具体流程如下" tabindex="-1"><a class="header-anchor" href="#具体流程如下"><span>具体流程如下:</span></a></h5><ul><li>从服务器获取一个对象,对象里包含了所有按钮的权限,</li><li>给按钮添加自定义指令,并且为每个按钮传递不同参数</li><li>通过自定义指令的bind生命周期 设置按钮的display 控制是否展示按钮或者直接删除元素</li></ul><h2 id="图片预加载-图片懒加载" tabindex="-1"><a class="header-anchor" href="#图片预加载-图片懒加载"><span>图片预加载 图片懒加载</span></a></h2><div class="hint-container info"><p class="hint-container-title">图片预加载 图片懒加载</p><p>图片预加载： 顾名思义，图片预加载就是在网页全部加载之前， 提前加载图片。 当用户需要查看时可直接从本地缓存中渲染， 以提供给用户更好的体验，减少等待的时间。否则，如果一个页面的内容过于庞大，没有使用预加载技术的页面就会长时间的展现为一片空白，这样浏览者可能以为图片预览慢而没兴趣浏览，把网页关掉，这时，就需要图片预加载。 当然这种做法实际上牺牲了服务器的性能换取了更好的用户体验。</p><p>图片懒加载（缓载 ）： 延迟加载图片或符合某些条件时才加载某些图片。这样做的好处是减少不必要的访问数据库或延迟访问数据库的次数，因为每次访问数据库都是比较耗时的即只有真正使用该对象的数据时才会创建。 懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。</p></div><h2 id="图片预加载" tabindex="-1"><a class="header-anchor" href="#图片预加载"><span>图片预加载</span></a></h2>',7),S={href:"https://blog.csdn.net/weixin_42530606/article/details/129089128",target:"_blank",rel:"noopener noreferrer"},f=n('<h2 id="前端图片懒加载的原理" tabindex="-1"><a class="header-anchor" href="#前端图片懒加载的原理"><span>前端图片懒加载的原理</span></a></h2><p>tips：核心原理是通过 判断图片元素是否显示在视图中，如果显示在视图中即显示图片。</p><ul><li><p>第一种是纯粹的延迟加载，使用setTimeOut或setInterval进行加载延迟，如果用户在加载前就离开了页面，那么就不会加载。</p></li><li><p>第二种是条件加载，符合某些条件，或触发了某些事件才开始异步下载。</p></li><li><p>第三种是可视区加载，即仅加载用户可以看到的区域，这个主要由监控滚动条来实现，一般会在距用户看到某图片前一定距离遍开始加载，这样能保证用户拉下时正好能看到图片</p></li></ul><h4 id="具体步骤如下" tabindex="-1"><a class="header-anchor" href="#具体步骤如下"><span>具体步骤如下：</span></a></h4><ul><li>声明img标签但是src属性为空，我们可以另外设置一个自定义属性data-src用来赋值图片url</li><li>然后就是监听scroll事件，同时scroll事件可以加上 节流，减少资源浪费</li><li>判断当前图片是否有在可视范围内，判断方法有多种，例如： offsetTop+offsetHeight &gt; scrollTop或者 getBoundingClientRect判断 top和left小于视窗高度(clientHeight)</li><li>如果是的情况下我们获取这个img元素的data-src然后把属性赋值src即可</li></ul><h2 id="如何让你在数组中查找元素你会如何实现" tabindex="-1"><a class="header-anchor" href="#如何让你在数组中查找元素你会如何实现"><span>如何让你在数组中查找元素你会如何实现</span></a></h2><p>如果是基础类型的数组 考虑使用 indexOf进行查找 如果是对象数组 则使用findIndex进行查找</p><h2 id="浏览器用过哪些缓存" tabindex="-1"><a class="header-anchor" href="#浏览器用过哪些缓存"><span>浏览器用过哪些缓存</span></a></h2><ul><li>1、http缓存是基于HTTP协议的浏览器文件级缓存机制。</li><li>2、websql这种方式只有较新的chrome浏览器支持，并以一个独立规范形式出现</li><li>3、indexDB是一个为了能够在客户端存储可观数量的结构化数据，并且在这些数据上使用索引进行高性能检索的 API</li><li>4、Cookie一般网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）</li><li>5、Localstorage html5的一种新的本地缓存方案，目前用的比较多，一般用来存储ajax返回的数据，加快下次页面打开时的渲染速度</li><li>6、Sessionstorage和localstorage类似，但是浏览器关闭则会全部删除，api和localstorage相同，实际项目中使用较少。</li><li>7、application cache是将大部分图片资源、js、css等静态资源放在manifest文件配置中</li><li>8、cacheStorage是在ServiceWorker的规范中定义的，可以保存每个serverWorker申明的cache对象</li><li>9、flash缓存这种方式基本不用，这一方法主要基于flash有读写浏览器端本地目录的功能</li></ul><h2 id="seo优化有了解过吗" tabindex="-1"><a class="header-anchor" href="#seo优化有了解过吗"><span>seo优化有了解过吗</span></a></h2>',10),k={class:"hint-container info"},v=l("p",{class:"hint-container-title"},"seo(搜索引擎)优化",-1),m={href:"https://juejin.cn/post/7349752708385816630?searchId=20240407114003C23B016413FFD78EBD30",target:"_blank",rel:"noopener noreferrer"},x=n(`<h2 id="堆和栈" tabindex="-1"><a class="header-anchor" href="#堆和栈"><span>堆和栈</span></a></h2><ul><li>堆（堆内存） 用于动态分配内区的区域，用于存储引用类型，如对象和数组 （在堆中分配的内存不会自动释放，需要通过垃圾回收机制来回收不再使用的内存。堆的大小通常比栈大，并且可以动态增长和收缩。）</li><li>栈 同于管理函数执行上下文和存储基本类型值的一种数据结构 （每当执行一个函数时，都会在栈中创建一个新的执行上下文，包括函数的参数、局部变量和函数的返回地址。当函数执行完成后， 对应的执行上下文会被销毁，栈会自动释放相关的内存。栈的大小通常比较小且固定，内存分配由系统自动管理。）</li></ul><p>区别 - 存储内容：堆用于存储引用类型的数据，如对象和数组；栈用于存储基本类型的数据，如布尔值、数值和字符串，以及函数执行的上下文。 - 分配方式：堆通过动态分配内存来存储数据；栈通过在执行上下文中的栈帧上分配固定大小的内存来存储数据。 - 大小和生长性：堆的大小通常比栈大，可以动态增长和收缩；栈的大小通常比较小且固定，由系统自动管理。 - 管理方式：堆的内存管理需要使用垃圾回收机制来回收不再使用的内存；栈的内存管理由系统自动处理，通过栈指针的移动来分配和释放内存。 - 生命周期：堆中分配的内存不会自动释放，需要通过垃圾回收来回收内存；栈中的内存由系统自动管理，在函数执行完成后自动释放。</p><h2 id="什么是柯里化函数-你对柯里化了解多少" tabindex="-1"><a class="header-anchor" href="#什么是柯里化函数-你对柯里化了解多少"><span>什么是柯里化函数，你对柯里化了解多少？</span></a></h2><h4 id="柯里化-柯里化是一个高阶函数-它可以将多个形参的函数转成单一的形参的函数" tabindex="-1"><a class="header-anchor" href="#柯里化-柯里化是一个高阶函数-它可以将多个形参的函数转成单一的形参的函数"><span>柯里化： 柯里化是一个高阶函数,它可以将多个形参的函数转成单一的形参的函数</span></a></h4><h4 id="代码实现-其实柯里化函数的核心点主要在args-length和fn-length的判断-当传入的参数个小小于原始函数的参数个数-则继续柯里化" tabindex="-1"><a class="header-anchor" href="#代码实现-其实柯里化函数的核心点主要在args-length和fn-length的判断-当传入的参数个小小于原始函数的参数个数-则继续柯里化"><span>代码实现:其实柯里化函数的核心点主要在args.length和fn.length的判断，当传入的参数个小小于原始函数的参数个数，则继续柯里化</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> _args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>_args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token operator">...</span>_args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom"><span>虚拟dom</span></a></h2><p>虚拟dom是用来表现真实dom结果的javaScript对象树，是构建在浏览器真实dom上的抽象层，虚拟dom是可以直接在内存中操作的，可以通过diff算法来对比新旧dom 差异，将最终变化应用到真实dom上</p>`,9);function _(b,D){const e=o("ExternalLinkIcon");return p(),r("div",null,[d,s(` #### 详细步骤如下
  - DNS查询服务器IP
  - TCP 三次握手
  - TLS 协商
  - 发送GET请求HTML文件
  - 将HTML内容构建DOM树
  - 将CSS内容构建CSSOM树
  - 将DOM树和CSSOM树合成渲染树
  - 根据渲染树进行页面元素布局
  - 绘制到页面 `),h,l("p",null,[l("a",u,[i("引文"),a(e)])]),s(` diff算法主要采用深度优先算法，逐层进行比较，具体实现如下
  - 首先会有两个虚拟DOM树，分为新的子节点集合，旧子节点集合
  - 同时会有4个索引分别指向，新子节点的首尾，旧的子节点首尾4个（这里以oldS,oldE,newS,newE）代表
  - 比较的话 就是oldS和oldE 分别对newS、newE进行比较就有四种情况了

  ####相等情况分为4种
   - oldS（旧节点的头）和newS （新节点的头）相等，那么oldS 和 newS 分别索引+1
   - oldS（旧节点的头）和newE （新节点的尾）相等，那么就是oldS +1 然后newE -1
   - oldE（旧节点的尾）和newS （新节点的尾）相等，那么oldE 和 newE 分别索引 +1
   - oldE（旧节点的尾）和newS （新节点的头）相等，那么就是oldE -1 然后 newS +1

最后会出现一种情况，就是如果存在不相等的节点的时候
会有两种结果
  - new的子节点集合大于  旧的子节点集合，添加新的子节点
  - 旧的节点集合大于新的节点集合，那么就会真实DOM中（不是在旧节点）删除多余的子节点 `),g,l("p",null,[i("常用的是new Image();，设置其src来实现预载，再使用onload方法回调预载完成事件。 引用"),l("a",S,[i("骨架屏"),a(e)])]),f,l("div",k,[v,l("p",null,[i("它是一种通过调整网站的内容、结构、外部链接等方面的优化手段，来提高网站在搜索引擎自然/免费搜索结果中的排名和可见度的过程 TDK是Title(标题)、Description（描述）和 Keywords（关键词）的缩写，是网站SEO的关键 "),l("a",m,[i("引文"),a(e)])])]),x])}const M=t(c,[["render",_],["__file","08.篇章8.html.vue"]]),y=JSON.parse('{"path":"/posts/Study/08.%E7%AF%87%E7%AB%A08.html","title":"篇章8","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-04-07T12:00:00.000Z","category":["篇章4"],"tag":["拓展"],"star":true,"description":"篇章8 从 url 输入地址到最终网页渲染，中间发生了什么 / 浏览器从输入到渲染的过程经历哪些过 相关信息 DNS解析（查询）：将域名地址解析成ip地址 浏览器DNS解析 计算机DNS解析 路由器DNS解析 网络运行商DNS解析 递归查询 TCP链接： TCP三次握手 客户端发送服务端：我准备好了，请你准备一下 服务端发送客户端：我也准备好了，请你确...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/starNotes/posts/Study/08.%E7%AF%87%E7%AB%A08.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"篇章8"}],["meta",{"property":"og:description","content":"篇章8 从 url 输入地址到最终网页渲染，中间发生了什么 / 浏览器从输入到渲染的过程经历哪些过 相关信息 DNS解析（查询）：将域名地址解析成ip地址 浏览器DNS解析 计算机DNS解析 路由器DNS解析 网络运行商DNS解析 递归查询 TCP链接： TCP三次握手 客户端发送服务端：我准备好了，请你准备一下 服务端发送客户端：我也准备好了，请你确..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T05:02:58.000Z"}],["meta",{"property":"article:author","content":"平安"}],["meta",{"property":"article:tag","content":"拓展"}],["meta",{"property":"article:published_time","content":"2024-04-07T12:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T05:02:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"篇章8\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-07T12:00:00.000Z\\",\\"dateModified\\":\\"2024-04-09T05:02:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"平安\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"从 url 输入地址到最终网页渲染，中间发生了什么 / 浏览器从输入到渲染的过程经历哪些过","slug":"从-url-输入地址到最终网页渲染-中间发生了什么-浏览器从输入到渲染的过程经历哪些过","link":"#从-url-输入地址到最终网页渲染-中间发生了什么-浏览器从输入到渲染的过程经历哪些过","children":[]},{"level":2,"title":"Localstorage / Sessionstorage / Cookie","slug":"localstorage-sessionstorage-cookie","link":"#localstorage-sessionstorage-cookie","children":[]},{"level":2,"title":"浏览器的宏任务与微任务是什么","slug":"浏览器的宏任务与微任务是什么","link":"#浏览器的宏任务与微任务是什么","children":[]},{"level":2,"title":"事件循环 EventLoop","slug":"事件循环-eventloop","link":"#事件循环-eventloop","children":[]},{"level":2,"title":"为什么要减少DOM操作中的重绘重排","slug":"为什么要减少dom操作中的重绘重排","link":"#为什么要减少dom操作中的重绘重排","children":[]},{"level":2,"title":"get和post","slug":"get和post","link":"#get和post","children":[]},{"level":2,"title":"说说网络错误码有哪些？ 分别代表什么意思","slug":"说说网络错误码有哪些-分别代表什么意思","link":"#说说网络错误码有哪些-分别代表什么意思","children":[]},{"level":2,"title":"如何解决页面刷新丢失数据的问题？","slug":"如何解决页面刷新丢失数据的问题","link":"#如何解决页面刷新丢失数据的问题","children":[]},{"level":2,"title":"单点登录","slug":"单点登录","link":"#单点登录","children":[]},{"level":2,"title":"SSR实现原理","slug":"ssr实现原理","link":"#ssr实现原理","children":[]},{"level":2,"title":"SSR渲染流程是什么样？","slug":"ssr渲染流程是什么样","link":"#ssr渲染流程是什么样","children":[]},{"level":2,"title":"diff算法","slug":"diff算法","link":"#diff算法","children":[]},{"level":2,"title":"后台系统中权限是实现到什么等级? 具体怎么实现的","slug":"后台系统中权限是实现到什么等级-具体怎么实现的","link":"#后台系统中权限是实现到什么等级-具体怎么实现的","children":[]},{"level":2,"title":"图片预加载 图片懒加载","slug":"图片预加载-图片懒加载","link":"#图片预加载-图片懒加载","children":[]},{"level":2,"title":"图片预加载","slug":"图片预加载","link":"#图片预加载","children":[]},{"level":2,"title":"前端图片懒加载的原理","slug":"前端图片懒加载的原理","link":"#前端图片懒加载的原理","children":[]},{"level":2,"title":"如何让你在数组中查找元素你会如何实现","slug":"如何让你在数组中查找元素你会如何实现","link":"#如何让你在数组中查找元素你会如何实现","children":[]},{"level":2,"title":"浏览器用过哪些缓存","slug":"浏览器用过哪些缓存","link":"#浏览器用过哪些缓存","children":[]},{"level":2,"title":"seo优化有了解过吗","slug":"seo优化有了解过吗","link":"#seo优化有了解过吗","children":[]},{"level":2,"title":"堆和栈","slug":"堆和栈","link":"#堆和栈","children":[]},{"level":2,"title":"什么是柯里化函数，你对柯里化了解多少？","slug":"什么是柯里化函数-你对柯里化了解多少","link":"#什么是柯里化函数-你对柯里化了解多少","children":[]},{"level":2,"title":"虚拟dom","slug":"虚拟dom","link":"#虚拟dom","children":[]}],"git":{"createdTime":1712027625000,"updatedTime":1712638978000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":9}]},"readingTime":{"minutes":24.48,"words":7344},"filePathRelative":"posts/Study/08.篇章8.md","localizedDate":"2024年4月7日","excerpt":"\\n<h2>从 url 输入地址到最终网页渲染，中间发生了什么 / 浏览器从输入到渲染的过程经历哪些过</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<ul>\\n<li>DNS解析（查询）：将域名地址解析成ip地址\\n<ul>\\n<li>浏览器DNS解析</li>\\n<li>计算机DNS解析</li>\\n<li>路由器DNS解析</li>\\n<li>网络运行商DNS解析</li>\\n<li>递归查询</li>\\n</ul>\\n</li>\\n<li>TCP链接： TCP三次握手\\n<ul>\\n<li>客户端发送服务端：我准备好了，请你准备一下</li>\\n<li>服务端发送客户端：我也准备好了，请你确认一下</li>\\n<li>客户端发送服务端： 确认完毕</li>\\n</ul>\\n</li>\\n<li>发送请求\\n<ul>\\n<li>将请求报文发送过去</li>\\n</ul>\\n</li>\\n<li>返回响应\\n<ul>\\n<li>将响应报文发送过来</li>\\n</ul>\\n</li>\\n<li>渲染页面\\n<ul>\\n<li>遇到HTML，调用HTML解析器，解析成DOM树</li>\\n<li>遇到CSS，调用CSS解析器，解析成CSSOM树</li>\\n<li>遇到JS,调用JS解析器（JS引擎），解析JS代码\\n<ul>\\n<li>可能要修改元素节点，重新调用HTML解析器，解析成新的DOM树</li>\\n<li>可能要修改样式节点，重新调用CSS解析器，解析成新的CSSOM树</li>\\n</ul>\\n</li>\\n<li>将DOM + CSSOM  = render树（渲染树）</li>\\n<li>layout布局：计算元素位置和大小信息\\nrender渲染：将颜色渲染上去</li>\\n</ul>\\n</li>\\n<li>断开链接：TCP四次挥手\\n<ul>\\n<li>\\n<p>断开请求链接2次</p>\\n</li>\\n<li>\\n<p>断开响应链接2次</p>\\n</li>\\n<li>\\n<p>客户端发送服务端：请求数据发送完毕，可以断开了</p>\\n</li>\\n<li>\\n<p>服务端发送客户端：请求数据接收完毕，可以断开了</p>\\n</li>\\n<li>\\n<p>服务端发送客户端：响应数据发送完毕，可以断开了</p>\\n</li>\\n<li>\\n<p>客户端发送服务端：响应数据接收完毕，可以断开了</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</div>","autoDesc":true}');export{M as comp,y as data};
