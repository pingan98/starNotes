import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as i,c as l,a as n,b as p,d as o,f as e}from"./app-CdtnlakQ.js";const c={},r=e(`<h1 id="篇章3" tabindex="-1"><a class="header-anchor" href="#篇章3"><span>篇章3</span></a></h1><h2 id="_1-讲一讲vue3的生命周期以及它们的作用" tabindex="-1"><a class="header-anchor" href="#_1-讲一讲vue3的生命周期以及它们的作用"><span>1:讲一讲vue3的生命周期以及它们的作用</span></a></h2><h5 id="vue3的生命周期主要是四个阶段-9个钩子分别是" tabindex="-1"><a class="header-anchor" href="#vue3的生命周期主要是四个阶段-9个钩子分别是"><span>vue3的生命周期主要是四个阶段 9个钩子分别是</span></a></h5><ul><li>创建-------在组件创建时执行</li><li>挂载-------DOM被挂载时执行</li><li>更新-------当响应式数据被修改时执行</li><li>销毁-------在元素销毁前执行</li></ul><h6 id="钩子函数分别有" tabindex="-1"><a class="header-anchor" href="#钩子函数分别有"><span>钩子函数分别有</span></a></h6><ul><li>beforeCreate------- 初始化事件以及生命周期,此时data和dom都未创建</li><li>created------- 创建后,此时已经初始化完毕,data可以访问,但是dom元素依然不行</li><li>onBeforeMount ------- 在挂载开始前调用,此时dom元素已经生成,但是未挂载到页面上,可以进行异步操作</li><li>onMounted ------- 组件挂载时调用,此时可以访问dom元素,可以进行异步操作</li><li>onBeforeUpdate ------- 数据更新前调用,这里可以访问更新前的dom,通常用来移除事件监听</li><li>onUpdated ------- 由于数据改变更新dom之后调用,这里可以访问更新后的dom</li><li>onBeforeUnmount ------ 卸载组件之前调用,通常用于清除计时以及事件监听</li><li>onUnmounted ------- 组件卸载之后调用,可以用于清除一些资源占用</li></ul><h6 id="补充vue2生命周期" tabindex="-1"><a class="header-anchor" href="#补充vue2生命周期"><span>补充vue2生命周期</span></a></h6><ul><li>beforeCreate: 创建前,初初始化事件以及生命周期,此时data和dom都未创建</li><li>created:创建后,此时已经初始化完毕,data可以访问,但是dom元素依然不行</li><li>beforeMounted: 挂载前,此时dom元素,data,计算属性等已经生成,但dom未挂载到页面上,可以进行异步操作</li><li>mounted: 挂在后,此时dom元素已经挂载完毕,可以访问dom,可以进行异步操作</li><li>beforeUpdate: 更新前,此时可以获取更新前的dom元素,可以对更新前的状态进行保存</li><li>updated: 更新后,此时页面已经更新完毕,可以访问更新后的dom</li><li>beforeDestroy: 销毁前,组件销毁前调用,通常用来清除计数器,事件监听</li><li>destroyed: 销毁后,此时dom元素已经卸载,可以释放组件用过的资源等操作</li></ul><h2 id="_2-setup什么时候执行" tabindex="-1"><a class="header-anchor" href="#_2-setup什么时候执行"><span>2:setup什么时候执行？</span></a></h2><h4 id="setup-在beforecreate之前执行-在组合式api-composition-api-中-setup-生命周期-取代了beforecreate-和created-两个生命周期" tabindex="-1"><a class="header-anchor" href="#setup-在beforecreate之前执行-在组合式api-composition-api-中-setup-生命周期-取代了beforecreate-和created-两个生命周期"><span>setup 在beforeCreate之前执行,在组合式API(Composition API)中 setup 生命周期 取代了beforeCreate 和created 两个生命周期</span></a></h4><p>Tips： setup 是围绕 beforeCreate 和 created 生命周期钩子运行的，所以不需要显式地去定义。</p><h2 id="_3-异步请求放在created和mounted哪个合适-create会不会有性能提升" tabindex="-1"><a class="header-anchor" href="#_3-异步请求放在created和mounted哪个合适-create会不会有性能提升"><span>3: 异步请求放在created和mounted哪个合适？create会不会有性能提升？</span></a></h2><div class="hint-container info"><p class="hint-container-title">异步请求放在created和mounted哪个合适?</p><p>异步请求 放在created 和 mounted 都是可以的,放在created更快的说法,性能并没有多少提升</p><ul><li>created 和 mounted 两者生命周期执行间隔差距很小,甚至到几微米</li><li>如果说在created 请求数据,请求后需要对数据进行操作,那么就得插入到主线程中,那么我们就需要打断X渲染线程</li><li>除此之外有时候请求后 我们需要对dom进行操作,那么created生命周期还没将dom元素挂载上,此时操作不合适</li><li>另外如果是 服务端渲染(ssr) 是需要放到created里进行异步请求,因为服务端不支持mounted</li></ul></div><h2 id="_4-怎么看待组合式api-composition-api-和-选项式api-options-api" tabindex="-1"><a class="header-anchor" href="#_4-怎么看待组合式api-composition-api-和-选项式api-options-api"><span>4 怎么看待组合式API (Composition API) 和 选项式API(Options API)</span></a></h2><div class="hint-container info"><p class="hint-container-title">选项式API(Options API)</p><h4 id="options-api" tabindex="-1"><a class="header-anchor" href="#options-api"><span>Options API</span></a></h4><pre><code>- 配置包括了components, props,data,computed,methods, mounted 等
这种方式结构清晰,易于理解,在小型项目中比较实用
</code></pre></div><div class="hint-container info"><p class="hint-container-title">组合式API (Composition API)</p><h4 id="composition-api" tabindex="-1"><a class="header-anchor" href="#composition-api"><span>Composition API</span></a></h4><pre><code>- 通过函数的形式来组织代码语言,运行把相关功能组合在一起,提高代码可维护性和重用性
</code></pre></div><pre><code>[vue2] 是选项式API 一个逻辑会散落在文件不同位置(data,props,computed,watch,生命周期钩子)
        导致代码可读性变差,当需要修改某个逻辑时,需要上下来回跳转文件位置

[vue3] 组合式API,可将同一逻辑的内容写在一起,增强看代码的可读性,内聚性,
        其还提供了较为完美的逻辑复用性方案,所有逻辑再setup函数中,使用ref,watch 等函数组织代码
</code></pre><h5 id="例-实现一个todolist" tabindex="-1"><a class="header-anchor" href="#例-实现一个todolist"><span>例:实现一个todoList</span></a></h5><pre><code>在 选项式API中,我们需要首先在data中生命一个list,然后再去methods中声明一个方法,然后再去生命周期中调用

在 组合式API中,我们声明的list 和 方法 都可以放在setup中,同时如果将来复用此功能,只需将这一块复制,
而选项式API 则要到data中寻找,再去methods中寻找方法
</code></pre><h2 id="_5-vue3对比vue2做了哪些改进-defineproperty" tabindex="-1"><a class="header-anchor" href="#_5-vue3对比vue2做了哪些改进-defineproperty"><span>5: vue3对比vue2做了哪些改进？defineProperty</span></a></h2><div class="hint-container info"><p class="hint-container-title">vue3对比vue2做了哪些改进</p><ul><li>性能优化 vue3采用Proxy 替代了Object.defineProperty 实现响应式,并且使用的静态提升技术, 提高渲染的性能,但是对于proxy有一个缺点,对IE11 不支持</li><li>组合式API 可以更好的复用组件逻辑</li><li>TypeScript支持, vue3 已经完全支持TypeScript</li><li>新的自定义渲染API, vue3对于生命周期组件事件等都需要进行自定义以及控制</li></ul></div><h2 id="_6-proxy和object-defineproperty的区别-使用proxy好处" tabindex="-1"><a class="header-anchor" href="#_6-proxy和object-defineproperty的区别-使用proxy好处"><span>6: Proxy和Object.defineProperty的区别 (使用proxy好处)</span></a></h2><div class="hint-container info"><p class="hint-container-title">proxy好处</p><ul><li>proxy 性能整体上优于 Object.defineProperty</li><li>支持更多数据类型的劫持(vue2只支持Object,Array; vue3 支持Object,Array,Map,WeakMap,Set,WeakSet)</li><li>支持更多时机来进行依赖收集和触发通知 (vue2 只在get时进行依赖收集, vue3在get/has/iterate时进行依赖收集 ;vue2在set时触发通知,vue3在set/add/delete/clear时触发通知),所以vue2 中的响应式缺陷vue可以实现</li><li>vue3 做到了&quot;精准数据&quot;的数据劫持(vue2会把整个data进行递归数据劫持,而vue3只有在用到某个对象时,才进行数据劫持,所以响应式更快并且占用内存更小)</li><li>vue3依赖收集器更容易维护(vue2是通过重写的方法实现对数组监控;vue3监听和操作的是原生数组)</li></ul></div><h2 id="_7-vue3的时候ref为什么要使用-value属性-如果是你有什么办法更好的实现它吗" tabindex="-1"><a class="header-anchor" href="#_7-vue3的时候ref为什么要使用-value属性-如果是你有什么办法更好的实现它吗"><span>7:vue3的时候ref为什么要使用.value属性？ 如果是你有什么办法更好的实现它吗？</span></a></h2><h4 id="value属性-首先我们要知道vue3-是基于proxy-和-reflect-实现响应式数据的-proxy能代理的东西是什么" tabindex="-1"><a class="header-anchor" href="#value属性-首先我们要知道vue3-是基于proxy-和-reflect-实现响应式数据的-proxy能代理的东西是什么"><span>.value属性, 首先我们要知道vue3 是基于proxy 和 reflect 实现响应式数据的，proxy能代理的东西是什么？</span></a></h4><h4 id="答案是-对象-那么就不难理解为什么-ref要-value了" tabindex="-1"><a class="header-anchor" href="#答案是-对象-那么就不难理解为什么-ref要-value了"><span>答案是 对象， 那么就不难理解为什么 ref要.value了</span></a></h4><h5 id="至于更好的实现ref-其实就是-value-访问太麻烦-容易混淆-也有人提出ref-sugar-即-ref语法糖-也就是去除ref-value-如何去除" tabindex="-1"><a class="header-anchor" href="#至于更好的实现ref-其实就是-value-访问太麻烦-容易混淆-也有人提出ref-sugar-即-ref语法糖-也就是去除ref-value-如何去除"><span>至于更好的实现ref, 其实就是.value 访问太麻烦,容易混淆,也有人提出ref sugar 即(ref语法糖),也就是去除ref .value,如何去除?</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 核心就是 对set 和 get 进行操作</span>
  <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> target<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> target<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="核心内容如下-如果vue-模板编译的时候会自动获取value-所以要判断key-为value的情况下-最后return-target-value-key-则是我们正常再js里面不通过-value-进行访问的逻辑" tabindex="-1"><a class="header-anchor" href="#核心内容如下-如果vue-模板编译的时候会自动获取value-所以要判断key-为value的情况下-最后return-target-value-key-则是我们正常再js里面不通过-value-进行访问的逻辑"><span>核心内容如下,如果vue 模板编译的时候会自动获取value,所以要判断key 为value的情况下,最后return target.value[key] 则是我们正常再js里面不通过 value 进行访问的逻辑</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 核心就是 对set 和 get 进行操作</span>

  <span class="token keyword">function</span> <span class="token function">magicRef</span><span class="token punctuation">(</span><span class="token parameter">initialValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> reactive <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span>
    <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">proxy</span><span class="token punctuation">(</span>reactive<span class="token punctuation">,</span><span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> target<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> target<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          target<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          target<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> proxy
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),u={id:"引用文章",tabindex:"-1"},d={class:"header-anchor",href:"#引用文章"},v={href:"https://juejin.cn/post/7226540105698771003?searchId=20231002075204FF098F426246DB507E79",target:"_blank",rel:"noopener noreferrer"},h=e(`<h2 id="ref函数-和-reactive函数" tabindex="-1"><a class="header-anchor" href="#ref函数-和-reactive函数"><span>ref函数 和 reactive函数</span></a></h2><div class="hint-container info"><p class="hint-container-title">ref</p><p>通常使用它定义响应式数据，不限类型</p><ul><li>从vue中导入ref 函数</li><li>在setup函数中，使用ref函数，传入普通数据（简单or复杂），返回一个响应式数据</li><li>最后setup函数返回一个对象，包含该响应式数据即可 注意：使用ref创建的数据，js中需要.value ，template中可省略</li></ul></div><div class="hint-container info"><p class="hint-container-title">reactive</p><p>通常使用它定义复杂类型的响应式数据</p><ul><li>从vue中导入reactive 函数</li><li>在setup函数中，使用reactive函数，传入一个普通对象，返回一个响应式数据对象</li><li>最后setup函数返回一个对象，包含该响应式对象即可，模板中可使用</li></ul></div><div class="hint-container info"><p class="hint-container-title">如何选择</p><ul><li>ref 可以转换简单数据类型为响应式数据对象，也支持复杂数据类型，但是操作时需要.value</li><li>reactive 可以转换对象为响应式数据对象，但是不支持简单数据类型</li><li>如果能确定数据是对象且字段名称也确定，可以使用reactive 转成响应式数据，例如 登录信息定义 账号/密码； 其他一概使用ref</li><li>在定义响应式数据的函数选择上，遵循：尽量使用ref函数支持所有场景，确定字段对象使用reactive 可以省去.value</li><li>t它们各有特点，现在也没有最佳实践，没有明显的界限，所有可以自由选择</li></ul></div><h2 id="pinia和vuex的区别" tabindex="-1"><a class="header-anchor" href="#pinia和vuex的区别"><span>Pinia和Vuex的区别</span></a></h2><div class="hint-container info"><p class="hint-container-title">Pinia和Vuex的区别</p><ul><li>1、Pinia是一个轻量级的状态管理库，它专注于提供一个简单的API来管理应用程序的状态。 相比之下，Vuex是一个更完整的状态管理库，它提供了更多的功能，比如模块化、插件和严格模式等。</li><li>2、Pinia是基于Vue 3的Composition API构建的，这使得它更加灵活和可组合。而Vuex则是基于Vue 2的Options API构建的，因此在某些方面可能会受到限制。</li><li>3、Pinia 提供了更加灵活的状态管理方式，因为它支持多个 store 实例，而 Vuex 只支持一个 store 实例。</li><li>4、Vuex 是一个比较成熟的状态管理库，已经被广泛使用和测试，更加稳定，而Pinia 是一个相对较新的状态管理库，因此它可能存在一些未知的问题和限制。</li><li>5、Vue3版本的一大优势就是对TypeScript的支持，所以Pinia也做到了完整的支持，而Vuex只是对TypeScript有部分的支持是不完整的。</li></ul></div><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks"><span>hooks</span></a></h2><div class="hint-container info"><p class="hint-container-title">hooks</p><p>在vue应用概念中，组合式函数是利用Vue组合式API来封装和复用 有状态逻辑的函数，借用大佬的定义：js里是callback，事件驱动，集成定义一些 可复用的方法</p></div><div class="hint-container info"><p class="hint-container-title">hooks作用</p><p>以函数形式抽离一些可复用的方法像钩子一样挂着，随时可以引入和调用，实现 高内聚低耦合 的目标</p><ul><li>将可复用功能抽离为外部JS/TS文件</li><li>函数名/文件名以use开头，如useXXX</li><li>引用时将响应式变量或者方法显示解构暴露出来 如 const {nameRef,Fn} = useXXX() (在setup函数解构出自定义hooks的变量和方法)</li></ul></div><div class="hint-container info"><p class="hint-container-title">Vue3自定义Hooks 和vue2时代Mixin的关系</p><p>Mixin/Class的局限性</p><ul><li>不清晰的数据来源：当使用了多个mixin/class时，哪个数据是哪个模块提供的将变得难以追寻，这将提高维护难度</li><li>命名空间冲突：来自多个class/mixin的开发者可能会注册同样的属性名，造成冲突</li><li>隐性的跨模块交流：不同的mixin/class之间可能存在某种相互作用，产生未知的后果</li></ul><p>hooks的优势 其实Mixin/Class的缺点反过来就是Hooks的优点：</p><ul><li>清晰一目了然的源头：Hooks不是一个类，没有将状态、方法存放在对象中，然后通过导出对象的形式实现复用，也就不会有对象间过度耦合、干扰等问题。Hooks中的各类状态是封装在内部的，与外界隔离，仅暴露部分函数、变量，这使得其来源、功能清晰可辨且不易被干扰</li><li>没有命名冲突的问题：Hooks本质是闭包函数，内部所导出的变量、方法支持重命名，因而同一个Hook在同一个组件中可以N次使用而不冲突</li><li>精简逻辑：一个Hook开发完成后，在使用Hook时不需要关心其内部逻辑，只需知道有什么效果、如何使用即可，专注于其他核心业务逻辑，可以节省大量重复代码</li></ul></div><h2 id="watch和-watcheffect" tabindex="-1"><a class="header-anchor" href="#watch和-watcheffect"><span>watch和 watchEffect</span></a></h2><div class="hint-container info"><p class="hint-container-title">watch watchEffect</p><ul><li><p>watch 可以访问新值和旧值 watchEffect只可以访问新值</p></li><li><p>watch 需要指明监听的对象，也需要指明监听的回调 watchEffect 不用指明监视哪一属性，监视的回调函数中 用到哪一属性，就监视哪个属性</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>  <span class="token keyword">const</span> num <span class="token operator">=</span>  <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;平安&#39;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>
    message<span class="token operator">:</span> <span class="token punctuation">{</span>
      iPhoneNumBer<span class="token operator">:</span> <span class="token string">&#39;18888888888&#39;</span><span class="token punctuation">,</span>
      address<span class="token operator">:</span> <span class="token string">&#39;中国&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> x1 <span class="token operator">=</span> num<span class="token punctuation">.</span>value
    <span class="token keyword">const</span> x2 <span class="token operator">=</span> user<span class="token punctuation">.</span>name
    <span class="token keyword">const</span> x3 <span class="token operator">=</span> user<span class="token punctuation">.</span>message<span class="token punctuation">.</span>iPhoneNumBer

    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watchEffect监听的回调执行了...&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>watch只有监听的值发生变化才会执行，但watchEffect不同，每次代码加载都会执行</p></li></ul></div><h2 id="监听计算属性computed" tabindex="-1"><a class="header-anchor" href="#监听计算属性computed"><span>监听计算属性computed</span></a></h2><div class="hint-container info"><p class="hint-container-title">计算属性computed</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>  <span class="token keyword">const</span> searchForm <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">&#39;平安&#39;</span><span class="token punctuation">,</span>
    id<span class="token operator">:</span><span class="token string">&#39;88888888&#39;</span><span class="token punctuation">,</span>
    type<span class="token operator">:</span><span class="token string">&#39;computed&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> listenInfo <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> id<span class="token punctuation">,</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> searchForm<span class="token punctuation">.</span>value
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">,</span>
      id<span class="token punctuation">,</span>
      type
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">watch</span><span class="token punctuation">(</span>listenInfo<span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;newValue&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;oldValue&#39;</span><span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="vue2-为什么要对数组的常用方法进行重写" tabindex="-1"><a class="header-anchor" href="#vue2-为什么要对数组的常用方法进行重写"><span>vue2 为什么要对数组的常用方法进行重写</span></a></h2><div class="hint-container info"><p class="hint-container-title">Vue2为什么要对数组的常用方法进行重写?</p><ul><li>在Vue 2中，Vue对数组的响应式特性进行了优化。</li><li>Vue包装（或“响应式化”）数组时，会替换数组的原型方法，如push、pop、shift、unshift、splice、sort和reverse，以确保它们能够触发视图更新。</li><li>如果你直接使用这些方法，Vue可以正常跟踪变化，并且更新视图。</li><li>但如果你使用自己的方法或者第三方库来操作数组，Vue可能无法检测到这些变化，因此需要对这些方法进行重写，以便它们能够触发视图更新</li></ul></div><h2 id="for-in-循环对象的时候是有序的吗" tabindex="-1"><a class="header-anchor" href="#for-in-循环对象的时候是有序的吗"><span>for in 循环对象的时候是有序的吗</span></a></h2><h4 id="无序的-for-in-循环的时候-不要依靠顺序去进行判断" tabindex="-1"><a class="header-anchor" href="#无序的-for-in-循环的时候-不要依靠顺序去进行判断"><span>无序的， for in 循环的时候，不要依靠顺序去进行判断</span></a></h4><h2 id="数据页面跳转" tabindex="-1"><a class="header-anchor" href="#数据页面跳转"><span>数据页面跳转</span></a></h2><p>:::</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cacheViews<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><h2 id="为什么vue中的data必须是一个函数" tabindex="-1"><a class="header-anchor" href="#为什么vue中的data必须是一个函数"><span>为什么vue中的data必须是一个函数</span></a></h2><div class="hint-container info"><p class="hint-container-title">为什么vue中的data必须是一个函数</p><pre><code>  - 对象为引用类型，当复用组件时，由于数据对象都指向同一个data对象，
  - 当在一个组件修改data时，其他重用组件中的data会同时修改；
  - 而使用返回对象的函数，由于每次返回的都是一个新对象
  （object 的实例）引用地址不同，则不会出现这个问题
</code></pre></div><h2 id="v-for-key的作用" tabindex="-1"><a class="header-anchor" href="#v-for-key的作用"><span>v-for key的作用</span></a></h2><div class="hint-container info"><p class="hint-container-title">key的作用</p><ul><li><p>当vue用v-for 更新已渲染过的元素列表时，它默认用“就地复用”策略，</p></li><li><p>如果数据项的顺序被改变，Vue将不是移动DOM元素来匹配数据项的改变，</p></li><li><p>而是简单复用此处的每个元素，并且确保它在特定索引下显示已经被渲染过的每个元素</p></li><li><p>为了给vue一个提示，以便它能跟踪每一个节点，从而重用和重新排序现有元素，</p></li><li><p>需要为每项提供一个唯一key属性，key属性类型只能是number和string类型</p></li><li><p>key的特殊属性主要用在Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes。</p></li><li><p>如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法。</p></li><li><p>使用Key，它会基于key的变化重新排列元素顺序，并且会移除key不存在的元素</p></li></ul></div><h2 id="nexttick是什么" tabindex="-1"><a class="header-anchor" href="#nexttick是什么"><span>$nextTick是什么？</span></a></h2><div class="hint-container info"><p class="hint-container-title">$nextTick</p><ul><li>vue实现响应式并不是数据发生变化后dom立即变化，而是按照一定策略来进行dom更新</li><li>nextTick 是在下次DOM更新循环结束之后执行延迟回调，</li><li>在修改数据之后使用nextTick 在可以在回调中获取更新后的DOM</li></ul></div><h2 id="nexttick实现原理" tabindex="-1"><a class="header-anchor" href="#nexttick实现原理"><span>$nextTick实现原理</span></a></h2><div class="hint-container info"><p class="hint-container-title">$nextTick实现原理</p><ul><li>Vue.nextTick() 方法的实现原理是基于浏览器的异步任务队列，采用微任务优先的方式。</li><li>当我们修改数据时，Vue 会将 DOM 更新操作放到一个异步任务队列中，等待下一次事件循环时执行。</li><li>而 Vue.nextTick() 方法则是将一个回调函数推入到异步任务队列中，等待 DOM 更新完成后执行。</li></ul><p>具体实现方式有以下几种:</p><ul><li><p>① 在 Vue2.x 中，如果浏览器支持 Promise，则会优先使用；</p></li><li><p>② 如果不支持 Promise，则会使用原生的 setTimeout 方法模拟异步操作；</p></li><li><p>③ 如果浏览器支持 MutationObserver，Vue 会使用 MutationObserver 监听 DOM 更新，并在 DOM 更新完成后执行回调函数。</p></li><li><p>④ 使用 setlmmediate: 在 lE 中，setlmmediate 方法可以用来延迟异步执行任务。在 Vue2.x 中，如果浏览器支持 setlmmediate，则会优先使用 setlmmediate，否则会使用 setTimeout</p></li></ul></div><h2 id="vue中v-if和v-show有什么区别" tabindex="-1"><a class="header-anchor" href="#vue中v-if和v-show有什么区别"><span>vue中v-if和v-show有什么区别？</span></a></h2><div class="hint-container info"><p class="hint-container-title">v-if和v-show</p><p>v-if 和 v-show 看起来似乎差不多，当条件不成立时，对其所对应的标签元素都不可见，但这两选项也是有区别的</p><ul><li>v-if在条件切换时，会对标签进行适当创建和销毁；而v-show则仅在初始化时加载一次，因此v-if的开销相对来说比v-show大</li><li>v-if是惰性的，只有条件为真时才会真正渲染标签；如果初始条件不为真，则v-if不会去渲染标签。v-show则无论初始条件是否成立，都会渲染标签，它仅仅做的只是简单的css切换</li></ul></div><h2 id="computed和watch的区别" tabindex="-1"><a class="header-anchor" href="#computed和watch的区别"><span>computed和watch的区别</span></a></h2><div class="hint-container info"><p class="hint-container-title">计算属性computed</p><pre><code>- 支持缓存，只有依赖数据发生改变，才会重新进行计算
- 不支持异步，当computed内有异步操作时无效，无法监听数据的变化
- 如果一个属性是由其他属性计算来的，这个属性依赖其它属性，是一个多对一或者一对一，一般用computed
- computed属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过
  或者父组件传递的props中的数据通过计算得到的值
- 如果computed属性属性值是函数，那么默认走get方法，函数的返回值就是属性的属性值；
  在computed中属性都有一个get和set方法，当数据变化时调用set方法
</code></pre></div><div class="hint-container info"><p class="hint-container-title">监听属性watch</p><pre><code>- 不支持缓存，数据变，会直接触发相应操作
- watch支持异步
- 监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值
- 当一个属性发生变化，需要执行对应的操作；一对多
- 监听的数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作

函数有两个参数
immediate: 组件加载立即触发回调函数执行
deep： 深入观察，监听器会一层层往下遍历，给对象所有属性都加上这个监视器
</code></pre></div><h2 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm"><span>MVVM</span></a></h2><div class="hint-container info"><p class="hint-container-title">MVVM</p><ul><li>MVVM 分别为 Model、View、ViewModel</li><li>Model 代表数据模型，数据和业务逻辑都在Model层中定义；</li><li>View 代表UI视图，负责数据的展示</li><li>ViewModel 负责监听Model中数据的改变并且控制视图更新；处理用户交互的操作</li><li>Model和View 并无直接关联，而是通过ViewModel 来进行联系的，Model和ViewModel之间有着双向数据绑定的联系。因此当Model中的数据改变时会触发View层的刷新，View中由于用户交互操作而改变的数据也会在Model中同步</li><li>这种模式实现了Model和View数据自动同步，因此开发者只需要专注于数据维护操作即可，而不需要自己操作DOM</li></ul></div><h2 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc"><span>MVC</span></a></h2><div class="hint-container info"><p class="hint-container-title">MVC</p><ul><li>MVC 分别为 Model、View、Controller</li><li>Model 模型对应后端数据</li><li>View 视图对应用户界面</li><li>Controller 控制器 对应页面的业务逻辑</li></ul><p>MVC工作机制原理就是，用户操作会请求服务器路由，路由就会调用对应的控制器来处理， 控制器就会获取后台数据，将结果返回给前端进行页面渲染</p></div><h2 id="vue原理" tabindex="-1"><a class="header-anchor" href="#vue原理"><span>Vue原理</span></a></h2><div class="hint-container info"><p class="hint-container-title">响应式原理</p><p>响应式：当数据发生变化，数据变，页面也变</p><ul><li>数据代理：将data数据代理到实例对象上（方便将来操作data数据） <ul><li>遍历所有的data数据，通过object.defineProperty()方法</li><li>将data中数据定义在实例对象上</li><li>内部就是通过get定义属性读取的方法，实际读取的是原数据_data</li><li>内部就是通过set定义属性设置的方法，实际设置的是原数据_data</li></ul></li><li>数据劫持 <ul><li>遍历所有的data数据，进行重新定义，将其定义成响应式</li><li>也是通过object.defineProperty()方法，重新定义属性get和set</li><li>此时会通过一个闭包的方式保存一个dep对象</li><li>get中将来通过dep就能建立起dep和watcher的联系</li><li>set中将来通过dep就能通知所有的watcher去更新用户界面</li></ul></li><li>模板解析： 将指令语法/插值语法编译解析 <ul><li>将元素节点转换成文档碎片节点 fragment</li><li>编译模板 <ul><li>取出当前节点所有子节点，进行遍历，判断节点是元素节点还是文本节点</li><li>如果为元素节点，要编译指令语法 <ul><li>取出当前元素所有属性 判断属性是不是指令属性 <ul><li>指令属性 v-on 给元素绑定事件，同时回调函数会通过bind方法强制改变this指向为vm</li><li>普通指令 进行相应解析（v-text/v-html），最终会new Watcher(),new Watcher()时就会建立dep和watcher 联系（你中有我，我中有你，互相保存）</li></ul></li></ul></li><li>如果为文本节点，要编译插值语法 最终会给元素设置textContext，值为表达式对应的值</li></ul></li><li>将编译后的模板添加到 （el元素中）页面中生效</li></ul></li><li>拓展话术 将来当用户去更新data数据时，this.person.name = &#39; xxx &#39;,此时会先触发 数据代理设置的属性的set方法，方法实际上设置的是_data（原数据）的值 ； 又会触发数据劫持属性的set方法，此时就会更新data数据，同时通过dep.notify() 通知所有当前保存的watcher去更新用户界面，从而达到响应式</li></ul></div><div class="hint-container info"><p class="hint-container-title">双向数据绑定原理</p><p>是通过v-model来实现双向数据绑定原理</p><ul><li>v-model会给元素绑定value属性（数据就从数据Model流向页面View），和绑定input事件</li><li>当用户输入数据，会触发input事件，在input事件中会更新data数据（数据就从页面View流向数据Model）</li></ul></div>`,42);function k(m,f){const a=t("ExternalLinkIcon");return i(),l("div",null,[r,n("h5",u,[n("a",d,[n("span",null,[n("a",v,[p("引用文章"),o(a)])])])]),h])}const g=s(c,[["render",k],["__file","03.篇章3.html.vue"]]),x=JSON.parse('{"path":"/posts/Study/03.%E7%AF%87%E7%AB%A03.html","title":"篇章3","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-27T12:30:00.000Z","category":["篇章3"],"tag":["vue2 vue3"],"star":true,"description":"篇章3 1:讲一讲vue3的生命周期以及它们的作用 vue3的生命周期主要是四个阶段 9个钩子分别是 创建-------在组件创建时执行 挂载-------DOM被挂载时执行 更新-------当响应式数据被修改时执行 销毁-------在元素销毁前执行 钩子函数分别有 beforeCreate------- 初始化事件以及生命周期,此时data和do...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/starNotes/posts/Study/03.%E7%AF%87%E7%AB%A03.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"篇章3"}],["meta",{"property":"og:description","content":"篇章3 1:讲一讲vue3的生命周期以及它们的作用 vue3的生命周期主要是四个阶段 9个钩子分别是 创建-------在组件创建时执行 挂载-------DOM被挂载时执行 更新-------当响应式数据被修改时执行 销毁-------在元素销毁前执行 钩子函数分别有 beforeCreate------- 初始化事件以及生命周期,此时data和do..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T09:29:34.000Z"}],["meta",{"property":"article:author","content":"平安"}],["meta",{"property":"article:tag","content":"vue2 vue3"}],["meta",{"property":"article:published_time","content":"2024-03-27T12:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-10T09:29:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"篇章3\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-27T12:30:00.000Z\\",\\"dateModified\\":\\"2024-04-10T09:29:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"平安\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1:讲一讲vue3的生命周期以及它们的作用","slug":"_1-讲一讲vue3的生命周期以及它们的作用","link":"#_1-讲一讲vue3的生命周期以及它们的作用","children":[]},{"level":2,"title":"2:setup什么时候执行？","slug":"_2-setup什么时候执行","link":"#_2-setup什么时候执行","children":[]},{"level":2,"title":"3: 异步请求放在created和mounted哪个合适？create会不会有性能提升？","slug":"_3-异步请求放在created和mounted哪个合适-create会不会有性能提升","link":"#_3-异步请求放在created和mounted哪个合适-create会不会有性能提升","children":[]},{"level":2,"title":"4 怎么看待组合式API (Composition API) 和 选项式API(Options API)","slug":"_4-怎么看待组合式api-composition-api-和-选项式api-options-api","link":"#_4-怎么看待组合式api-composition-api-和-选项式api-options-api","children":[]},{"level":2,"title":"5: vue3对比vue2做了哪些改进？defineProperty","slug":"_5-vue3对比vue2做了哪些改进-defineproperty","link":"#_5-vue3对比vue2做了哪些改进-defineproperty","children":[]},{"level":2,"title":"6: Proxy和Object.defineProperty的区别 (使用proxy好处)","slug":"_6-proxy和object-defineproperty的区别-使用proxy好处","link":"#_6-proxy和object-defineproperty的区别-使用proxy好处","children":[]},{"level":2,"title":"7:vue3的时候ref为什么要使用.value属性？ 如果是你有什么办法更好的实现它吗？","slug":"_7-vue3的时候ref为什么要使用-value属性-如果是你有什么办法更好的实现它吗","link":"#_7-vue3的时候ref为什么要使用-value属性-如果是你有什么办法更好的实现它吗","children":[]},{"level":2,"title":"ref函数 和 reactive函数","slug":"ref函数-和-reactive函数","link":"#ref函数-和-reactive函数","children":[]},{"level":2,"title":"Pinia和Vuex的区别","slug":"pinia和vuex的区别","link":"#pinia和vuex的区别","children":[]},{"level":2,"title":"hooks","slug":"hooks","link":"#hooks","children":[]},{"level":2,"title":"watch和 watchEffect","slug":"watch和-watcheffect","link":"#watch和-watcheffect","children":[]},{"level":2,"title":"监听计算属性computed","slug":"监听计算属性computed","link":"#监听计算属性computed","children":[]},{"level":2,"title":"vue2 为什么要对数组的常用方法进行重写","slug":"vue2-为什么要对数组的常用方法进行重写","link":"#vue2-为什么要对数组的常用方法进行重写","children":[]},{"level":2,"title":"for in 循环对象的时候是有序的吗","slug":"for-in-循环对象的时候是有序的吗","link":"#for-in-循环对象的时候是有序的吗","children":[]},{"level":2,"title":"数据页面跳转","slug":"数据页面跳转","link":"#数据页面跳转","children":[]},{"level":2,"title":"为什么vue中的data必须是一个函数","slug":"为什么vue中的data必须是一个函数","link":"#为什么vue中的data必须是一个函数","children":[]},{"level":2,"title":"v-for key的作用","slug":"v-for-key的作用","link":"#v-for-key的作用","children":[]},{"level":2,"title":"$nextTick是什么？","slug":"nexttick是什么","link":"#nexttick是什么","children":[]},{"level":2,"title":"$nextTick实现原理","slug":"nexttick实现原理","link":"#nexttick实现原理","children":[]},{"level":2,"title":"vue中v-if和v-show有什么区别？","slug":"vue中v-if和v-show有什么区别","link":"#vue中v-if和v-show有什么区别","children":[]},{"level":2,"title":"computed和watch的区别","slug":"computed和watch的区别","link":"#computed和watch的区别","children":[]},{"level":2,"title":"MVVM","slug":"mvvm","link":"#mvvm","children":[]},{"level":2,"title":"MVC","slug":"mvc","link":"#mvc","children":[]},{"level":2,"title":"Vue原理","slug":"vue原理","link":"#vue原理","children":[]}],"git":{"createdTime":1711585352000,"updatedTime":1712741374000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":13}]},"readingTime":{"minutes":18.92,"words":5675},"filePathRelative":"posts/Study/03.篇章3.md","localizedDate":"2024年3月27日","excerpt":"\\n<h2>1:讲一讲vue3的生命周期以及它们的作用</h2>\\n<h5>vue3的生命周期主要是四个阶段 9个钩子分别是</h5>\\n<ul>\\n<li>创建-------在组件创建时执行</li>\\n<li>挂载-------DOM被挂载时执行</li>\\n<li>更新-------当响应式数据被修改时执行</li>\\n<li>销毁-------在元素销毁前执行</li>\\n</ul>\\n<h6>钩子函数分别有</h6>\\n<ul>\\n<li>beforeCreate------- 初始化事件以及生命周期,此时data和dom都未创建</li>\\n<li>created------- 创建后,此时已经初始化完毕,data可以访问,但是dom元素依然不行</li>\\n<li>onBeforeMount ------- 在挂载开始前调用,此时dom元素已经生成,但是未挂载到页面上,可以进行异步操作</li>\\n<li>onMounted ------- 组件挂载时调用,此时可以访问dom元素,可以进行异步操作</li>\\n<li>onBeforeUpdate -------  数据更新前调用,这里可以访问更新前的dom,通常用来移除事件监听</li>\\n<li>onUpdated ------- 由于数据改变更新dom之后调用,这里可以访问更新后的dom</li>\\n<li>onBeforeUnmount ------ 卸载组件之前调用,通常用于清除计时以及事件监听</li>\\n<li>onUnmounted ------- 组件卸载之后调用,可以用于清除一些资源占用</li>\\n</ul>","autoDesc":true}');export{g as comp,x as data};
