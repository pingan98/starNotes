import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,b as a,d as l,f as s}from"./app-DhIJT4NS.js";const i={},u=s(`<h1 id="篇章2" tabindex="-1"><a class="header-anchor" href="#篇章2"><span>篇章2</span></a></h1><h2 id="防抖-节流" tabindex="-1"><a class="header-anchor" href="#防抖-节流"><span>防抖 节流</span></a></h2><div class="hint-container info"><p class="hint-container-title">防抖debounce 和 节流 throttle</p><p>防抖是在事件停止触发后延迟执行函数，而节流是按照固定的时间间隔执行函数</p><ul><li><p>防抖：限制函数在一段连续的时间内只执行一次; 当连续触发某个事件时，只有在事件停止触发一段时间后，才会执行函数。</p><ul><li>输入框搜索：当用户在搜索框中输入关键字时，使用防抖可以避免频繁发送搜索请求，而是在用户停止输入一段时间后才发送请求，减轻服务器压力。</li><li>窗口调整：当窗口大小调整时，使用防抖可以避免频繁地触发重排和重绘操作，提高页面性能。</li><li>按钮点击：当用户点击按钮时，使用防抖可以避免用户多次点击造成的多次提交或重复操作。</li></ul></li><li><p>节流：它按照固定的时间间隔执行函数。当连续触发某个事件时，每隔一段时间执行一次函数。</p><ul><li>页面滚动：当页面滚动时，使用节流可以限制滚动事件的触发频率，减少事件处理的次数，提高页面的响应性能。</li><li>鼠标移动：当鼠标在某个元素上移动时，使用节流可以减少事件处理的次数，避免过于频繁的操作。</li></ul></li></ul><h4 id="区别-一个是规定时间内只执行一次-一个是立即执行规定时间内不重复执行-其实区别可以不用回答-介绍防抖和节流就包含了区别" tabindex="-1"><a class="header-anchor" href="#区别-一个是规定时间内只执行一次-一个是立即执行规定时间内不重复执行-其实区别可以不用回答-介绍防抖和节流就包含了区别"><span>区别: 一个是规定时间内只执行一次， 一个是立即执行规定时间内不重复执行，其实区别可以不用回答，介绍防抖和节流就包含了区别</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 防抖</span>
  <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">.</span><span class="token punctuation">.</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 节流</span>
  <span class="token keyword">function</span> <span class="token function">throttle</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">.</span><span class="token punctuation">.</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span>
      timer <span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝</span></a></h2><p>重新在堆中创建内存，拷贝前后的基本类型互不影响，拷贝前后的引用类型还是会共享同一块内存，故而会相互影响。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ， 展开运算符<span class="token operator">...</span> ， array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h2><p>从堆内存中开辟一块新的区域存放新对象，对原始对象的所有属性进行递归拷贝，对所有的引用类型的属性同样开辟新区域，修改新对象不会影响原对象。</p><ul><li>使用json 序列号和反序列化<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> clone <span class="token operator">=</span> Json<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>Json<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>使用递归完成深拷贝 这种方式通过递归遍历原始对象，并对该对象的属性进行逐一深拷贝，以创建一个原对象独立副本<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> clonedObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      clonedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> clonedObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> deepClonedObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
deepClonedObj<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// { a: 1, b: { c: 2 } }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepClonedObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { a: 1, b: { c: 3 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>第三方库 lodash 库中的 _.cloneDeep 方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> deepClonedObj <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  deepClonedObj<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// { a: 1, b: { c: 2 } }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepClonedObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { a: 1, b: { c: 3 } }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域"><span>跨域</span></a></h2><h4 id="浏览器对于javascript的同源策略的限制" tabindex="-1"><a class="header-anchor" href="#浏览器对于javascript的同源策略的限制"><span>浏览器对于javascript的同源策略的限制</span></a></h4><p>协议 域名 端口号 不一致 解决方案：</p><ul><li>Jsonp 是利用&lt;script&gt;标签不受同源策略约束的特点通过动态创建并插入&lt;script&gt;标签来实现跨域请求</li><li>nginx反向代理</li><li>cors 服务端设置响应头</li><li>服务端配置代理服务器实现跨域</li><li>vue proxy配置代理跨域</li></ul><h2 id="说说对于vite和webpack的理解" tabindex="-1"><a class="header-anchor" href="#说说对于vite和webpack的理解"><span>说说对于vite和webpack的理解</span></a></h2><ul><li>webpack 和 vite都是很好的打包工具,对于webpack,在大型项目中构建比较慢,因为它需要对文件执行多次扫描和转译,从而衍生了vite,vite是以开发模式极速构建著称,它利用了ES模块 特性,只构建正在编译的模块,而不是项目,真正做到了按需引入</li><li>webpack 目前插件生态比较丰富,对于vite插件相对较少,同时对于项目的话个人认为webpack适合大型项目,vite适合中小型项目</li></ul><h2 id="webpack五大核心概念" tabindex="-1"><a class="header-anchor" href="#webpack五大核心概念"><span>webpack五大核心概念</span></a></h2><ul><li>entry（入口）：指示webpack以哪个文件为入口起点打包，分析构建内部依赖</li><li>output（输出）： 指示webpack打包后的自建bundles 输出到哪里去，以及如何命名</li><li>Loader（加载器） ： webpack 自身能力有限，只能处理 js/json 文件，但是遇到 css/html 等文件就没办法处理 loader 能将 webpack 不识别的文件编译加载成 webpack 能识别的文件，这样才能打包处理</li><li>Plugins（插件）：功能比 loader 更加强大，增强 webpack 的功能，可以用来执行范围更广的任务。 插件范围包括，从打包优化和压缩，一直到定义环境中的变量</li><li>mode （模式）： 指示webpack 使用相应模式的配置 development 开发环境 production 生产环境</li></ul><h2 id="webpack进行构建性能优化" tabindex="-1"><a class="header-anchor" href="#webpack进行构建性能优化"><span>webpack进行构建性能优化</span></a></h2><div class="hint-container info"><p class="hint-container-title">webpack进行构建性能优化</p><p>webpack是开发过程中一项至关重要的任务，不仅能够显著加快开发速度还能有效提升构建效率， 针对webpack的构建流程我们可以从多个维度入手进行细致而有效的优化处理</p><ul><li>首选缩小文件的搜索范围是提升构建速度的关键一步 <ul><li>通过合理配置alias、extensions等选项我们可以指导webpack更精准的定位到目标模块文件,从而大大减少不必要文件遍历和解析操作，让构建过程更为高效</li></ul></li><li>其次我们可以减少需要解析的文件也是优化构建速度的重要手段 <ul><li>利用noParse配置我们可以指示webpack忽略某些大型库或不需要解析的文件从而避免对这些文件进行不必要的处理，进一步加速构建过程</li></ul></li><li>另外避免重复编译第三方库同样至关重要，通过将第三方库单独打包，我们可以有效避免它们与业务代码一同被重复编译，从而减少构建时间和资源消耗</li><li>除了上述方法我们还可以借助插件和工具来进一步提升构建速度， <ul><li>例如利用happypack插件 我们可以将构建任务分解成多个子进程进行处理充分发挥多核cpu的优势显著提高构建效率</li><li>同时针对文件压缩等任务，我们可以使用parallelUglifyPlugin插件开启多个子进程，并行压缩多个js文件从而大幅缩短构建时间</li></ul></li><li>此外利用缓存机制也是提升构建速度的有效途径， <ul><li>我们可以通过cache-loader或hard-source-webpack-plugin等插件我们可以将已经构建过的模块缓存起来，避免重复编译相同内容进一步提升构建效率</li></ul></li><li>同时合理选择和配置loader也是构建优化的关键环节，</li><li>根据项目的实际需求进行合适的loader并进行精细配置可以避免不必要的转化和解析过程，减少构建过程中的开销，通过精准匹配需要的处理的文件我们可以进一步提高构建效率</li><li>另外精确设置查找路径也是提升构建速度的有效手段 通过缩小node默认查找范围我们可以减少不必要的文件搜索操作从而加快构建速度</li><li>根据开发环境和生产环境的不同需求我们还可以配置不同的构建选项这不仅可以提高构建速度还可以优化最终的打包结果降低项目的体积</li><li>此外开启热更新功能也是值得考虑的一个优化点通过只刷新修改的模块， 我们可以保持其他模块的原装，从而大大减少修改代码后的重新构建时间</li></ul><p>需要注意的是优化是一个持续的过程我们需要根据项目的实际情况和需求逐步尝试和调整这些优化方案找到最适合自己的构建方式； 同时我们也不能忽略代码的质量和可维护性，确保在追求速度的同时保持代码的可读性和可维护性</p></div><h2 id="如何把webpack迁移到vite" tabindex="-1"><a class="header-anchor" href="#如何把webpack迁移到vite"><span>如何把webpack迁移到vite</span></a></h2>`,21),r={href:"https://blog.csdn.net/x550392236/article/details/133752932",target:"_blank",rel:"noopener noreferrer"},k=s('<h2 id="import-和-require的区别" tabindex="-1"><a class="header-anchor" href="#import-和-require的区别"><span>import 和 require的区别</span></a></h2><ul><li>首先是标准不同 import/export 是ES6标准, require/module.exports 是CommonJS的标准</li><li>其次是执行过程 import是编译时执行异步加载,require是运行时才执行即同步加载</li><li>import会 提升到文件的顶部</li><li>require的性能会相对稍低于import</li></ul><h2 id="包管理器-npm、pnpm、yarn" tabindex="-1"><a class="header-anchor" href="#包管理器-npm、pnpm、yarn"><span>包管理器 npm、pnpm、yarn</span></a></h2><div class="hint-container info"><p class="hint-container-title">包管理器 npm、pnpm、yarn。</p><p>作为前端nodejs的包管理器, 发现随着开发的项目的逐渐增多，安装的依赖包越来越臃肿，依赖包的安装速度也是非常越来越慢，多项目开发管理也是比较麻烦。</p><ul><li>npm是nodejs默认自带的包管理器，安装nodejs时一并安装了npm。</li><li>yarn 在 npm 的基础上进行了改进和增强，旨在提高依赖包的安装速度和可靠性。</li><li>pnpm是nodejs的另一个包管理器，类似于npm和yarn，但是采用了不同于他们两者的方式来管理依赖包。</li></ul></div>',4);function d(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[a("引用"),n("a",r,[a("webpack迁移到vite"),l(t)])]),k])}const y=p(i,[["render",d],["__file","02.篇章2.html.vue"]]),w=JSON.parse('{"path":"/posts/Study/02.%E7%AF%87%E7%AB%A02.html","title":"篇章2","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-26T12:30:00.000Z","category":["篇章2"],"tag":["防抖 节流 vite和webpack import和require"],"star":true,"description":"篇章2 防抖 节流 防抖debounce 和 节流 throttle 防抖是在事件停止触发后延迟执行函数，而节流是按照固定的时间间隔执行函数 防抖：限制函数在一段连续的时间内只执行一次; 当连续触发某个事件时，只有在事件停止触发一段时间后，才会执行函数。 输入框搜索：当用户在搜索框中输入关键字时，使用防抖可以避免频繁发送搜索请求，而是在用户停止输入一段...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/starNotes/posts/Study/02.%E7%AF%87%E7%AB%A02.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"篇章2"}],["meta",{"property":"og:description","content":"篇章2 防抖 节流 防抖debounce 和 节流 throttle 防抖是在事件停止触发后延迟执行函数，而节流是按照固定的时间间隔执行函数 防抖：限制函数在一段连续的时间内只执行一次; 当连续触发某个事件时，只有在事件停止触发一段时间后，才会执行函数。 输入框搜索：当用户在搜索框中输入关键字时，使用防抖可以避免频繁发送搜索请求，而是在用户停止输入一段..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-11T07:44:49.000Z"}],["meta",{"property":"article:author","content":"平安"}],["meta",{"property":"article:tag","content":"防抖 节流 vite和webpack import和require"}],["meta",{"property":"article:published_time","content":"2024-03-26T12:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-11T07:44:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"篇章2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-26T12:30:00.000Z\\",\\"dateModified\\":\\"2024-04-11T07:44:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"平安\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"防抖 节流","slug":"防抖-节流","link":"#防抖-节流","children":[]},{"level":2,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[]},{"level":2,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]},{"level":2,"title":"跨域","slug":"跨域","link":"#跨域","children":[]},{"level":2,"title":"说说对于vite和webpack的理解","slug":"说说对于vite和webpack的理解","link":"#说说对于vite和webpack的理解","children":[]},{"level":2,"title":"webpack五大核心概念","slug":"webpack五大核心概念","link":"#webpack五大核心概念","children":[]},{"level":2,"title":"webpack进行构建性能优化","slug":"webpack进行构建性能优化","link":"#webpack进行构建性能优化","children":[]},{"level":2,"title":"如何把webpack迁移到vite","slug":"如何把webpack迁移到vite","link":"#如何把webpack迁移到vite","children":[]},{"level":2,"title":"import 和 require的区别","slug":"import-和-require的区别","link":"#import-和-require的区别","children":[]},{"level":2,"title":"包管理器 npm、pnpm、yarn","slug":"包管理器-npm、pnpm、yarn","link":"#包管理器-npm、pnpm、yarn","children":[]}],"git":{"createdTime":1711508155000,"updatedTime":1712821489000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":14}]},"readingTime":{"minutes":7.98,"words":2394},"filePathRelative":"posts/Study/02.篇章2.md","localizedDate":"2024年3月26日","excerpt":"\\n<h2>防抖 节流</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">防抖debounce 和 节流 throttle</p>\\n<p>防抖是在事件停止触发后延迟执行函数，而节流是按照固定的时间间隔执行函数</p>\\n<ul>\\n<li>\\n<p>防抖：限制函数在一段连续的时间内只执行一次; 当连续触发某个事件时，只有在事件停止触发一段时间后，才会执行函数。</p>\\n<ul>\\n<li>输入框搜索：当用户在搜索框中输入关键字时，使用防抖可以避免频繁发送搜索请求，而是在用户停止输入一段时间后才发送请求，减轻服务器压力。</li>\\n<li>窗口调整：当窗口大小调整时，使用防抖可以避免频繁地触发重排和重绘操作，提高页面性能。</li>\\n<li>按钮点击：当用户点击按钮时，使用防抖可以避免用户多次点击造成的多次提交或重复操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>节流：它按照固定的时间间隔执行函数。当连续触发某个事件时，每隔一段时间执行一次函数。</p>\\n<ul>\\n<li>页面滚动：当页面滚动时，使用节流可以限制滚动事件的触发频率，减少事件处理的次数，提高页面的响应性能。</li>\\n<li>鼠标移动：当鼠标在某个元素上移动时，使用节流可以减少事件处理的次数，避免过于频繁的操作。</li>\\n</ul>\\n</li>\\n</ul>\\n<h4>区别: 一个是规定时间内只执行一次， 一个是立即执行规定时间内不重复执行，其实区别可以不用回答，介绍防抖和节流就包含了区别</h4>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>  <span class=\\"token comment\\">// 防抖</span>\\n  <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">debounce</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">func<span class=\\"token punctuation\\">,</span>time</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> timer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>args</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">clearInterval</span><span class=\\"token punctuation\\">(</span>timer<span class=\\"token punctuation\\">)</span>\\n      timer <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span>args<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> time<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</code></pre></div><div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>  <span class=\\"token comment\\">// 节流</span>\\n  <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">throttle</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">func<span class=\\"token punctuation\\">,</span>time</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> timer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>args</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>timer<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span>\\n      timer <span class=\\"token operator\\">=</span><span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span>time<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>time<span class=\\"token punctuation\\">)</span>\\n      timer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</code></pre></div></div>","autoDesc":true}');export{y as comp,w as data};
