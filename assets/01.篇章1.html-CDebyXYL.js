import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,f as e}from"./app-Dm9P7ZK8.js";const t={},p=e(`<h1 id="篇章1" tabindex="-1"><a class="header-anchor" href="#篇章1"><span>篇章1</span></a></h1><h2 id="css的三大特性" tabindex="-1"><a class="header-anchor" href="#css的三大特性"><span>css的三大特性</span></a></h2><h4 id="继承性-、层叠性、优先性" tabindex="-1"><a class="header-anchor" href="#继承性-、层叠性、优先性"><span>继承性 、层叠性、优先性</span></a></h4><h5 id="可继承的属性有-font-size-font-family-font-style-text-align-line-height-cursor等等" tabindex="-1"><a class="header-anchor" href="#可继承的属性有-font-size-font-family-font-style-text-align-line-height-cursor等等"><span>可继承的属性有： font-size;font-family;font-style;text-align;line-height cursor等等</span></a></h5><h2 id="超出文本省略css和js的实现方式-考虑兼容性" tabindex="-1"><a class="header-anchor" href="#超出文本省略css和js的实现方式-考虑兼容性"><span>超出文本省略css和js的实现方式, 考虑兼容性</span></a></h2><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* 单行 */</span>
 <span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 多行*/</span>
 <span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js-js实现文字超出隐藏其-核心逻辑就是循环添加文字-添加完之后判断滚动高度-scrollheight-是否大于可视高度-offsetheight-如果大于就把后面三个字符替换成" tabindex="-1"><a class="header-anchor" href="#js-js实现文字超出隐藏其-核心逻辑就是循环添加文字-添加完之后判断滚动高度-scrollheight-是否大于可视高度-offsetheight-如果大于就把后面三个字符替换成"><span>JS: js实现文字超出隐藏其 核心逻辑就是循环添加文字 添加完之后判断滚动高度(scrollHeight) 是否大于可视高度 (offsetHeight) 如果大于就把后面三个字符替换成...</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">textHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本&#39;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetHeight <span class="token operator">&lt;</span> box<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">{</span>
        box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;...&#39;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> box<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rem-em-px-这些有什么区别" tabindex="-1"><a class="header-anchor" href="#rem-em-px-这些有什么区别"><span>rem,em,px 这些有什么区别</span></a></h2><ul><li>rem（根元素字体大小的倍数：rem 是相对单位，相对于根元素（即 元素）的字体大小。如果根元素的字体大小为 16 像素，那么 1rem 就等于 16 像素。如果根元素的字体大小为 20 像素，那么 1rem 就等于 20 像素。通过设置根元素的字体大小，可以方便地调整整个页面的大小。例如，font-size: 1.5rem; 表示字体大小为根元素字体大小的 1.5 倍。</li><li>em（相对于父元素字体大小的倍数）：em 也是相对单位，相对于父元素的字体大小。如果父元素的字体大小为 16 像素，那么 1em 就等于 16 像素。如果父元素的字体大小为 20 像素，那么 1em 就等于 20 像素。通过设置父元素的字体大小，可以影响其子元素的大小。例如，font-size: 1.2em; 表示字体大小为父元素字体大小的 1.2 倍。</li><li>px（像素）：px 是绝对单位，表示屏幕上的一个物理像素点。它是最常用的单位，具有固定的大小，不会根据其他因素而 改变。例如，font-size: 16px; 表示字体大小为 16 像素。</li></ul><p>总结来说，px是绝对单位，不会随其他因素改变；rem是相对于根元素字体大小的倍数，可以方便调整整个页面大小， em是相对于父元素字体大小的倍数，可以影响子元素大小</p><p>在实际应用中，可以根据需求选择合适的单位。对于响应式设计，使用rem 可以方便的调整整个页面的大小，对于局部样式 可以使用px或em 来控制具体的大小</p>`,12),o=[p];function i(c,l){return n(),a("div",null,o)}const d=s(t,[["render",i],["__file","01.篇章1.html.vue"]]),k=JSON.parse('{"path":"/posts/Study/01.%E7%AF%87%E7%AB%A01.html","title":"篇章1","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-26T07:00:00.000Z","category":["篇章1"],"tag":["css"],"star":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"css的三大特性","slug":"css的三大特性","link":"#css的三大特性","children":[]},{"level":2,"title":"超出文本省略css和js的实现方式, 考虑兼容性","slug":"超出文本省略css和js的实现方式-考虑兼容性","link":"#超出文本省略css和js的实现方式-考虑兼容性","children":[{"level":3,"title":"JS: js实现文字超出隐藏其 核心逻辑就是循环添加文字 添加完之后判断滚动高度(scrollHeight)  是否大于可视高度 (offsetHeight)  如果大于就把后面三个字符替换成...","slug":"js-js实现文字超出隐藏其-核心逻辑就是循环添加文字-添加完之后判断滚动高度-scrollheight-是否大于可视高度-offsetheight-如果大于就把后面三个字符替换成","link":"#js-js实现文字超出隐藏其-核心逻辑就是循环添加文字-添加完之后判断滚动高度-scrollheight-是否大于可视高度-offsetheight-如果大于就把后面三个字符替换成","children":[]}]},{"level":2,"title":"rem,em,px 这些有什么区别","slug":"rem-em-px-这些有什么区别","link":"#rem-em-px-这些有什么区别","children":[]}],"git":{"createdTime":1711508155000,"updatedTime":1711617725000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":5}]},"readingTime":{"minutes":2.29,"words":687},"filePathRelative":"posts/Study/01.篇章1.md","localizedDate":"2024年3月26日"}');export{d as comp,k as data};
