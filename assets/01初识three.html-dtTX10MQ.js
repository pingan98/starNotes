import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,a as e,b as n,d as r,e as l,f as s}from"./app-CgMXUQUZ.js";const i={},d=e("h1",{id:"_01-初识-安装three-js",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_01-初识-安装three-js"},[e("span",null,"01 初识 安装three.js")])],-1),m={href:"https://gitee.com/xin_hu199/threejs-code-public",target:"_blank",rel:"noopener noreferrer"},u=s(`<p>要安装three 的 npm 模块，请在你的项目文件夹里打开终端窗口，并运行：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>  npm install three
  <span class="token comment">// 或</span>
  pnpm install three
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包将会被下载并安装。然后你就可以将它导入你的代码了：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>  <span class="token comment">// 方式 1: 导入整个 three.js核心库</span>
  <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">THREE</span> <span class="token keyword">from</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">THREE</span></span><span class="token punctuation">.</span><span class="token function">Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 方式 2: 仅导入你所需要的部分</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> Scene <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),h=s('<h2 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性"><span>兼容性</span></a></h2><h3 id="commonjs-导入" tabindex="-1"><a class="header-anchor" href="#commonjs-导入"><span>CommonJS 导入</span></a></h3><p>虽然现代的 JavaScript 打包器已经默认支持ES module，然而也有一些较旧的构建工具并不支持。对于这些情况，你或许可以对这些打包器进行配置，让它们能够理解 ES module 。例如，Browserify 仅需 babelify 插件。</p><h3 id="import-maps" tabindex="-1"><a class="header-anchor" href="#import-maps"><span>Import maps</span></a></h3><p>和从静态主机或CDN来进行安装的方式相比，从npm安装时，导入的路径有所不同。我们意识到，对于使用两种不同方式的用户群体来说，这是一个人体工程学问题。使用构建工具与打包器的开发者更喜欢仅使用单独的包说明符（如&#39;three&#39;）而非相对路径，而examples/目录中的文件使用相对于 three.module.js 的引用并不符合这一期望。对于不使用构建工具的人（用于快速原型、学习或个人参考）来说，或许也会很反感这些相对导入。这些相对导入需要确定目录结构，并且比全局 THREE.* 命名空间更不宽容。</p><p>我们希望在 import maps 广泛可用时，能够移除这些相对路径，将它们替换为单独的包说明符，&#39;three&#39;。这更加符合构建工具对npm包的期望，且使得两种用户群体在导入文件时能够编写完全相同的代码。对于更偏向于避免使用构建工具的用户来说，一个简单的 JSON 映射即可将所有的导入都定向到一个 CDN 或是静态文件夹。通过实验，目前你可以通过一个 import map 的 polyfill，来尝试更简洁的导入，如 import map example 示例中所示。</p><h3 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js"><span>Node.js</span></a></h3><p>由于 three.js 是为 Web 构建的, 因此它依赖于浏览器和 DOM 的 API ，但这些 API 在 Node.js 里不一定存在。这些问题中有的可以使用 headless-gl 等 shims 来解决，或者用自定义的替代方案来替换像 TextureLoader 这样的组件。其他 DOM API 可能与使用它们的代码强相关，因此将更难以解决。我们欢迎简单且易于维护的 pull request 来改进对 Node.js 的支持，但建议先打开问题来讨论您的改进。</p><p>确保在您的 package.json 文件中添加 { &quot;type&quot;: &quot;module&quot; }，以在您的 Node.js 项目中启用 ES6 模块。</p>',9);function k(g,y){const a=o("ExternalLinkIcon");return p(),c("div",null,[d,e("p",null,[e("a",m,[n("中文文档下载地址"),r(a)]),n(" 下载到本地 安装依赖 运行查看中文文档提高便捷性")]),u,l(" more "),h])}const b=t(i,[["render",k],["__file","01初识three.html.vue"]]),f=JSON.parse(`{"path":"/posts/Three/01%E5%88%9D%E8%AF%86three.html","title":"01 初识 安装three.js","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-21T00:00:00.000Z","category":["three.js"],"tag":["01 初识 安装"],"star":true,"description":"01 初识 安装three.js 中文文档下载地址 下载到本地 安装依赖 运行查看中文文档提高便捷性 要安装three 的 npm 模块，请在你的项目文件夹里打开终端窗口，并运行： 包将会被下载并安装。然后你就可以将它导入你的代码了： 兼容性 CommonJS 导入 虽然现代的 JavaScript 打包器已经默认支持ES module，然而也有一些较...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/starNotes/posts/Three/01%E5%88%9D%E8%AF%86three.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"01 初识 安装three.js"}],["meta",{"property":"og:description","content":"01 初识 安装three.js 中文文档下载地址 下载到本地 安装依赖 运行查看中文文档提高便捷性 要安装three 的 npm 模块，请在你的项目文件夹里打开终端窗口，并运行： 包将会被下载并安装。然后你就可以将它导入你的代码了： 兼容性 CommonJS 导入 虽然现代的 JavaScript 打包器已经默认支持ES module，然而也有一些较..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T00:33:22.000Z"}],["meta",{"property":"article:author","content":"平安"}],["meta",{"property":"article:tag","content":"01 初识 安装"}],["meta",{"property":"article:published_time","content":"2024-03-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T00:33:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01 初识 安装three.js\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T00:33:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"平安\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"兼容性","slug":"兼容性","link":"#兼容性","children":[{"level":3,"title":"CommonJS 导入","slug":"commonjs-导入","link":"#commonjs-导入","children":[]},{"level":3,"title":"Import maps","slug":"import-maps","link":"#import-maps","children":[]},{"level":3,"title":"Node.js","slug":"node-js","link":"#node-js","children":[]}]}],"git":{"createdTime":1711076563000,"updatedTime":1711413202000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":2}]},"readingTime":{"minutes":2.53,"words":758},"filePathRelative":"posts/Three/01初识three.md","localizedDate":"2024年3月21日","excerpt":"\\n<p><a href=\\"https://gitee.com/xin_hu199/threejs-code-public\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">中文文档下载地址</a>  下载到本地 安装依赖 运行查看中文文档提高便捷性</p>\\n<p>要安装three 的 npm 模块，请在你的项目文件夹里打开终端窗口，并运行：</p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code>  npm install three\\n  <span class=\\"token comment\\">// 或</span>\\n  pnpm install three\\n</code></pre></div><p>包将会被下载并安装。然后你就可以将它导入你的代码了：</p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code>  <span class=\\"token comment\\">// 方式 1: 导入整个 three.js核心库</span>\\n  <span class=\\"token keyword\\">import</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">as</span> <span class=\\"token constant\\">THREE</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'three'</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> scene <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\"><span class=\\"token constant\\">THREE</span></span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Scene</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 方式 2: 仅导入你所需要的部分</span>\\n  <span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> Scene <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'three'</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> scene <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Scene</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{b as comp,f as data};
