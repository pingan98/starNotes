import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as e}from"./app-P5o8HvBU.js";const t={},p=e(`<h1 id="篇章5" tabindex="-1"><a class="header-anchor" href="#篇章5"><span>篇章5</span></a></h1><h2 id="_1-为什么要使用ts" tabindex="-1"><a class="header-anchor" href="#_1-为什么要使用ts"><span>1：为什么要使用Ts</span></a></h2><ul><li>ts 可以对代码类型进行检查，避免了js遇到一些错误</li><li>ts 可以改进js，同时规范我们的代码</li><li>ts附带了许多功能，可以协助我们开发</li><li>ts使得代码更容易阅读和理解</li></ul><h2 id="_2-什么是ts的方法重载" tabindex="-1"><a class="header-anchor" href="#_2-什么是ts的方法重载"><span>2：什么是ts的方法重载？</span></a></h2><p>方法重载：是一种特性，允许声明多个不同函数签名，根据传入的参数来执行不同操作</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>两句代码定义了两个函数签名，如果传一个name就执行第一个操作，如果传name和age就执行第二个 提供一个函数来实现相应操作</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,You are </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-谈谈ts枚举" tabindex="-1"><a class="header-anchor" href="#_3-谈谈ts枚举"><span>3:谈谈ts枚举</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Gender<span class="token punctuation">{</span>
  Male<span class="token punctuation">,</span>
  female<span class="token punctuation">,</span>
  Other
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-ts的内置类型有哪些" tabindex="-1"><a class="header-anchor" href="#_4-ts的内置类型有哪些"><span>4: ts的内置类型有哪些</span></a></h2><p>number string boolean null undefined 高级数据类型： Array Any Tuple enum</p><h2 id="_5-刚刚你谈到了tuple它有什么作用-有什么特点" tabindex="-1"><a class="header-anchor" href="#_5-刚刚你谈到了tuple它有什么作用-有什么特点"><span>5:刚刚你谈到了Tuple它有什么作用？有什么特点？</span></a></h2><p>tips：Tuple 又称为元组，它是一个有顺序的数据类型，有以下特点</p><ul><li>明确知道数组的长度，并且知道元素类型</li><li>可以知道每个元素的所在位置</li><li>长度固定，因为需要对每个元素定义类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">tupleNum</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span> <span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-type-和interface的区别" tabindex="-1"><a class="header-anchor" href="#_6-type-和interface的区别"><span>6: type 和interface的区别</span></a></h2><ul><li>interface 可以重复声明，type不行</li><li>type可以用typeOf去获取某一个数据类型</li><li>type 支持使用in去遍历映射类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">names</span> <span class="token operator">=</span> <span class="token string">&#39;firstName&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;lastName&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;AKA&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">nameType</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> names<span class="token punctuation">]</span><span class="token operator">:</span> srting<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>模块化导出type 必须先声明再导出</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">interface</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> User
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-ts的never和void有什么区别" tabindex="-1"><a class="header-anchor" href="#_7-ts的never和void有什么区别"><span>7: ts的never和void有什么区别</span></a></h2><ul><li>void表示没有任何类型，值可以是null或者undefined</li><li>never表示这个值永远不会存在</li></ul>`,23),l=[p];function i(o,c){return s(),a("div",null,l)}const d=n(t,[["render",i],["__file","05.篇章5.html.vue"]]),k=JSON.parse('{"path":"/posts/Study/05.%E7%AF%87%E7%AB%A05.html","title":"篇章5","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-28T12:00:00.000Z","category":["篇章5"],"tag":["TS"],"star":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1：为什么要使用Ts","slug":"_1-为什么要使用ts","link":"#_1-为什么要使用ts","children":[]},{"level":2,"title":"2：什么是ts的方法重载？","slug":"_2-什么是ts的方法重载","link":"#_2-什么是ts的方法重载","children":[]},{"level":2,"title":"3:谈谈ts枚举","slug":"_3-谈谈ts枚举","link":"#_3-谈谈ts枚举","children":[]},{"level":2,"title":"4: ts的内置类型有哪些","slug":"_4-ts的内置类型有哪些","link":"#_4-ts的内置类型有哪些","children":[]},{"level":2,"title":"5:刚刚你谈到了Tuple它有什么作用？有什么特点？","slug":"_5-刚刚你谈到了tuple它有什么作用-有什么特点","link":"#_5-刚刚你谈到了tuple它有什么作用-有什么特点","children":[]},{"level":2,"title":"6: type 和interface的区别","slug":"_6-type-和interface的区别","link":"#_6-type-和interface的区别","children":[]},{"level":2,"title":"7: ts的never和void有什么区别","slug":"_7-ts的never和void有什么区别","link":"#_7-ts的never和void有什么区别","children":[]}],"git":{"createdTime":1711672807000,"updatedTime":1711672807000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":1}]},"readingTime":{"minutes":1.63,"words":490},"filePathRelative":"posts/Study/05.篇章5.md","localizedDate":"2024年3月28日"}');export{d as comp,k as data};
