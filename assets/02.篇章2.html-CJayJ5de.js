import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,a,b as l,d as c,f as n}from"./app-C5C4XUpG.js";const i={},r=n(`<h1 id="篇章2" tabindex="-1"><a class="header-anchor" href="#篇章2"><span>篇章2</span></a></h1><h3 id="_1-vue3的时候ref为什么要使用-value属性-如果是你有什么办法更好的实现它吗" tabindex="-1"><a class="header-anchor" href="#_1-vue3的时候ref为什么要使用-value属性-如果是你有什么办法更好的实现它吗"><span>1:vue3的时候ref为什么要使用.value属性？ 如果是你有什么办法更好的实现它吗？</span></a></h3><h4 id="value属性-首先我们要知道vue3-是基于proxy-和-reflect-实现响应式数据的-proxy能代理的东西是什么" tabindex="-1"><a class="header-anchor" href="#value属性-首先我们要知道vue3-是基于proxy-和-reflect-实现响应式数据的-proxy能代理的东西是什么"><span>.value属性, 首先我们要知道vue3 是基于proxy 和 reflect 实现响应式数据的，proxy能代理的东西是什么？</span></a></h4><h4 id="答案是-对象-那么就不难理解为什么-ref要-value了" tabindex="-1"><a class="header-anchor" href="#答案是-对象-那么就不难理解为什么-ref要-value了"><span>答案是 对象， 那么就不难理解为什么 ref要.value了</span></a></h4><h5 id="至于更好的实现ref-其实就是-value-访问太麻烦-容易混淆-也有人提出ref-sugar-即-ref语法糖-也就是去除ref-value-如何去除" tabindex="-1"><a class="header-anchor" href="#至于更好的实现ref-其实就是-value-访问太麻烦-容易混淆-也有人提出ref-sugar-即-ref语法糖-也就是去除ref-value-如何去除"><span>至于更好的实现ref, 其实就是.value 访问太麻烦,容易混淆,也有人提出ref sugar 即(ref语法糖),也就是去除ref .value,如何去除</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 核心就是 对set 和 get 进行操作</span>
  <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> target<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> target<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="核心内容如下-如果vue-模板编译的时候会自动获取value-所以要判断key-为value的情况下-最后return-target-value-key-则是我们正常再js里面不通过-value-进行访问的逻辑" tabindex="-1"><a class="header-anchor" href="#核心内容如下-如果vue-模板编译的时候会自动获取value-所以要判断key-为value的情况下-最后return-target-value-key-则是我们正常再js里面不通过-value-进行访问的逻辑"><span>核心内容如下,如果vue 模板编译的时候会自动获取value,所以要判断key 为value的情况下,最后return target.value[key] 则是我们正常再js里面不通过 value 进行访问的逻辑</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 核心就是 对set 和 get 进行操作</span>

  <span class="token keyword">function</span> <span class="token function">magicRef</span><span class="token punctuation">(</span><span class="token parameter">initialValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> reactive <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span>
    <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">proxy</span><span class="token punctuation">(</span>reactive<span class="token punctuation">,</span><span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> target<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> target<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          target<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          target<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> proxy
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),u={id:"引用文章",tabindex:"-1"},d={class:"header-anchor",href:"#引用文章"},v={href:"https://juejin.cn/post/7226540105698771003?searchId=20231002075204FF098F426246DB507E79",target:"_blank",rel:"noopener noreferrer"},k=n('<h3 id="_2-ssr渲染流程是什么样" tabindex="-1"><a class="header-anchor" href="#_2-ssr渲染流程是什么样"><span>2:SSR渲染流程是什么样？</span></a></h3><h5 id="_1-客户端发送url请求到服务端" tabindex="-1"><a class="header-anchor" href="#_1-客户端发送url请求到服务端"><span>①:客户端发送URL请求到服务端</span></a></h5><h5 id="_2-服务端查询数据库" tabindex="-1"><a class="header-anchor" href="#_2-服务端查询数据库"><span>②:服务端查询数据库</span></a></h5><h5 id="_3-拿到数据-组合好页面" tabindex="-1"><a class="header-anchor" href="#_3-拿到数据-组合好页面"><span>③:拿到数据,组合好页面</span></a></h5><h5 id="_4-服务端返回整个dom结构给客户端" tabindex="-1"><a class="header-anchor" href="#_4-服务端返回整个dom结构给客户端"><span>④:服务端返回整个DOM结构给客户端</span></a></h5><h3 id="_3-如何解决页面刷新丢失数据的问题" tabindex="-1"><a class="header-anchor" href="#_3-如何解决页面刷新丢失数据的问题"><span>3:如何解决页面刷新丢失数据的问题？</span></a></h3><h5 id="通过本地储存解决-localstorage-或-sessionstorage-存储-或通过插件-vuex-persistedstate-解决" tabindex="-1"><a class="header-anchor" href="#通过本地储存解决-localstorage-或-sessionstorage-存储-或通过插件-vuex-persistedstate-解决"><span>通过本地储存解决 localStorage 或 sessionStorage 存储 或通过插件 vuex-persistedstate 解决</span></a></h5>',7);function h(m,f){const s=t("ExternalLinkIcon");return p(),o("div",null,[r,a("h5",u,[a("a",d,[a("span",null,[a("a",v,[l("引用文章"),c(s)])])])]),k])}const _=e(i,[["render",h],["__file","02.篇章2.html.vue"]]),y=JSON.parse('{"path":"/posts/Study/02.%E7%AF%87%E7%AB%A02.html","title":"篇章2","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-27T00:00:00.000Z","category":["篇章2"],"star":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":3,"title":"1:vue3的时候ref为什么要使用.value属性？ 如果是你有什么办法更好的实现它吗？","slug":"_1-vue3的时候ref为什么要使用-value属性-如果是你有什么办法更好的实现它吗","link":"#_1-vue3的时候ref为什么要使用-value属性-如果是你有什么办法更好的实现它吗","children":[]},{"level":3,"title":"2:SSR渲染流程是什么样？","slug":"_2-ssr渲染流程是什么样","link":"#_2-ssr渲染流程是什么样","children":[]},{"level":3,"title":"3:如何解决页面刷新丢失数据的问题？","slug":"_3-如何解决页面刷新丢失数据的问题","link":"#_3-如何解决页面刷新丢失数据的问题","children":[]}],"git":{"createdTime":1711508155000,"updatedTime":1711508644000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":2}]},"readingTime":{"minutes":1.29,"words":386},"filePathRelative":"posts/Study/02.篇章2.md","localizedDate":"2024年3月27日"}');export{_ as comp,y as data};
