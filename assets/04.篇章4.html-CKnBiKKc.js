import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as l,c as p,a as n,b as i,d as o,f as a}from"./app-CgMXUQUZ.js";const c={},r=a(`<h1 id="篇章4" tabindex="-1"><a class="header-anchor" href="#篇章4"><span>篇章4</span></a></h1><h2 id="ssr实现原理" tabindex="-1"><a class="header-anchor" href="#ssr实现原理"><span>SSR实现原理</span></a></h2><p>vue.js的ssR是一种在服务器上预渲染Vue.js应用程序的技术。</p><ul><li>服务器接收请求：当服务器接收一个请求时，它会创建一个新的Vue实例。</li><li>创建渲染器：使用vue-server-renderer包创建一个渲染器。</li><li>渲染页面：服务器使用渲染器将Vue实例渲染为Html字符串。</li><li>发送响应：服务器将渲染后的Html字符串作为响应发送给客户端。</li><li>客户端接收响应：客户端接收到服务器的响应后，将HTML字符串解析为DOM并显示给用户。</li><li>激活(Hydration): Vue在客户端创建一个新的Vue实例，将其挂载到服务器收到的Dom上</li></ul><h2 id="_1-ssr渲染流程是什么样" tabindex="-1"><a class="header-anchor" href="#_1-ssr渲染流程是什么样"><span>1:SSR渲染流程是什么样？</span></a></h2><ul><li>客户端发送URL请求到服务端</li><li>服务端查询数据库</li><li>拿到数据,组合好页面</li><li>服务端返回整个DOM结构给客户端</li></ul><h2 id="_2-浏览器从输入到渲染的过程经历哪些过" tabindex="-1"><a class="header-anchor" href="#_2-浏览器从输入到渲染的过程经历哪些过"><span>2:浏览器从输入到渲染的过程经历哪些过</span></a></h2><h4 id="详细步骤如下" tabindex="-1"><a class="header-anchor" href="#详细步骤如下"><span>详细步骤如下</span></a></h4><ul><li>DNS查询服务器IP</li><li>TCP 三次握手</li><li>TLS 协商</li><li>发送GET请求HTML文件</li><li>将HTML内容构建DOM树</li><li>将CSS内容构建CSSOM树</li><li>将DOM树和CSSOM树合成渲染树</li><li>根据渲染树进行页面元素布局</li><li>绘制到页面</li></ul><h2 id="_3-说说网络错误码有哪些-分别代表什么意思" tabindex="-1"><a class="header-anchor" href="#_3-说说网络错误码有哪些-分别代表什么意思"><span>3: 说说网络错误码有哪些？ 分别代表什么意思</span></a></h2><h4 id="网络错误码-以下前缀开发头代表不同的错误" tabindex="-1"><a class="header-anchor" href="#网络错误码-以下前缀开发头代表不同的错误"><span>网络错误码：以下前缀开发头代表不同的错误</span></a></h4><ul><li>1 开头表示消息</li><li>2 开头 表示成功</li><li>3 表示重定向</li><li>4 表示客户端错误</li><li>4 表示服务器错误</li></ul><h5 id="_1xx段-表示请求已被接受-需要继续处理。这类响应是临时响应-只包含状态行和某些可选的响应头信息" tabindex="-1"><a class="header-anchor" href="#_1xx段-表示请求已被接受-需要继续处理。这类响应是临时响应-只包含状态行和某些可选的响应头信息"><span>1XX段：表示请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息</span></a></h5><p>常见的有：</p><ul><li>100(客户端继续发送请求，这是临时响应)</li><li>101(服务器根据客户请求切换协议)</li></ul><h5 id="_2xx段-表示请求已成功被服务器接收、理解、并接受" tabindex="-1"><a class="header-anchor" href="#_2xx段-表示请求已成功被服务器接收、理解、并接受"><span>2xx段： 表示请求已成功被服务器接收、理解、并接受</span></a></h5><p>常见的有：</p><ul><li>200（成功）： 请求已成功，并且返回所希望的响应头和数据体</li><li>201 (已创建): 请求成功并且服务器创建了新的资源</li><li>202 （已创建）： 服务器已接收请求，但是尚未处理完成</li><li>203（非授权信息）: 服务器已成功处理请求,但返回的信息可能来自另一来源</li><li>204(无内容)： 服务器成功处理请求，但无返回内容</li><li>205(重置内容)： 服务器成功处理请求，但没有任何返回内容</li><li>206(部分内容)： 表示服务器成功处理了部分请求，通常在断电续传或者分块下载使用</li></ul><h5 id="_3xx段-表示完成请求-需要进一步操作。" tabindex="-1"><a class="header-anchor" href="#_3xx段-表示完成请求-需要进一步操作。"><span>3xx段： 表示完成请求，需要进一步操作。</span></a></h5><p>常见的有：</p><ul><li>300（多种选择）：针对请求，服务器可执行多种操作</li><li>301(永久移动)： 请求的页面已永久移动到新位置</li><li>302(临时移动): 服务器目前从不同位置的页面响应请求</li><li>303(查看其它位置)： 请求者应对不同的位置单独使用get请求来检索响应</li><li>304(协商缓存)： 服务器通过状态304可以告诉客户端请求资源成功</li><li>305 （使用代理）： 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理</li><li>307 （临时重定向）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li></ul><h5 id="_4xx段-表示服务器无法处理请求-客户端错误" tabindex="-1"><a class="header-anchor" href="#_4xx段-表示服务器无法处理请求-客户端错误"><span>4xx段： 表示服务器无法处理请求，客户端错误</span></a></h5><p>常见的有：</p><ul><li>400（错误请求）： 服务器不理解请求的语法</li><li>401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li>403（禁止）： 服务器拒绝请求</li><li>404（未找到）： 请求的资源不存在</li><li>405（方法禁用）： 禁用请求中指定的方法</li><li>406（不接受）： 无法使用请求的内容特性响应请求的网页</li><li>407（需要代理授权）： 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理</li><li>408（请求超时）： 服务器等候请求时发生超时</li></ul><h5 id="_5xx段-表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生" tabindex="-1"><a class="header-anchor" href="#_5xx段-表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生"><span>5xx段： 表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生</span></a></h5><p>常见的有：</p><ul><li>500（服务器内部错误）：服务器遇到错误，无法完成请求</li><li>501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li><li>502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应</li><li>503（服务不可用）： 服务器目前无法使用（由于超载或停机维护）</li><li>504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li><li>505（HTTP 版本不受支持）： 服务器不支持请求中所用的 HTTP 协议版本</li></ul><h2 id="_4-如何解决页面刷新丢失数据的问题" tabindex="-1"><a class="header-anchor" href="#_4-如何解决页面刷新丢失数据的问题"><span>4:如何解决页面刷新丢失数据的问题？</span></a></h2><ul><li>通过本地储存解决 localStorage 或 sessionStorage 存储</li><li>或通过插件 vuex-persistedstate 解决</li></ul><h2 id="_4-后台系统中权限是实现到什么等级-具体怎么实现的" tabindex="-1"><a class="header-anchor" href="#_4-后台系统中权限是实现到什么等级-具体怎么实现的"><span>4: 后台系统中权限是实现到什么等级? 具体怎么实现的</span></a></h2><h4 id="目前大多数是实现到按钮级-实现的方法是通过自定义指令" tabindex="-1"><a class="header-anchor" href="#目前大多数是实现到按钮级-实现的方法是通过自定义指令"><span>目前大多数是实现到按钮级,实现的方法是通过自定义指令</span></a></h4><h5 id="具体流程如下" tabindex="-1"><a class="header-anchor" href="#具体流程如下"><span>具体流程如下:</span></a></h5><ul><li>从服务器获取一个对象,对象里包含了所有按钮的权限,</li><li>给按钮添加自定义指令,并且为每个按钮传递不同参数</li><li>通过自定义指令的bind生命周期 设置按钮的display 控制是否展示按钮或者直接删除元素</li></ul><h2 id="_6-for-in-循环对象的时候是有序的吗" tabindex="-1"><a class="header-anchor" href="#_6-for-in-循环对象的时候是有序的吗"><span>6: for in 循环对象的时候是有序的吗</span></a></h2><h4 id="无序的-for-in-循环的时候-不要依靠顺序去进行判断" tabindex="-1"><a class="header-anchor" href="#无序的-for-in-循环的时候-不要依靠顺序去进行判断"><span>无序的， for in 循环的时候，不要依靠顺序去进行判断</span></a></h4><h2 id="_7-前端做过哪些优化" tabindex="-1"><a class="header-anchor" href="#_7-前端做过哪些优化"><span>7: 前端做过哪些优化</span></a></h2><ul><li>一些第三方库通过CDN方式引入</li><li>使用iconfont代替图片图标</li><li>图片懒加载 路由懒加载</li><li>代码层面例如防抖节流 频繁切换的场景使用v-show替换v-if</li><li>利用webpack-boundle-analyzer 分析打包后文件大小，进行优化</li></ul><h2 id="_8-前端图片懒加载的原理" tabindex="-1"><a class="header-anchor" href="#_8-前端图片懒加载的原理"><span>8: 前端图片懒加载的原理</span></a></h2><p>tips：核心原理是通过 判断图片元素是否显示在视图中，如果显示在视图中即显示图片。</p><h4 id="具体步骤如下" tabindex="-1"><a class="header-anchor" href="#具体步骤如下"><span>具体步骤如下：</span></a></h4><ul><li>声明img标签但是src属性为空，我们可以另外设置一个自定义属性data-src用来赋值图片url</li><li>然后就是监听scroll事件，同时scroll事件可以加上 节流，减少资源浪费</li><li>判断当前图片是否有在可视范围内，判断方法有多种，例如： offsetTop+offsetHeight &gt; scrollTop或者<br> getBoundingClientRect判断 top和left小于视窗高度(clientHeight)</li><li>如果是的情况下我们获取这个img元素的data-src然后把属性赋值src即可</li></ul><h2 id="_9-箭头函数和普通函数的区别" tabindex="-1"><a class="header-anchor" href="#_9-箭头函数和普通函数的区别"><span>9: 箭头函数和普通函数的区别？</span></a></h2><ul><li>箭头函数没有原型，所以箭头函数没有this</li><li>箭头函数this继承外层的第一个普通函数</li><li>不能直接修改箭头函数的this指向</li><li>箭头函数没有argements</li><li>箭头函数只能声明匿名函数（箭头函数可以通过表达式让箭头函数具名），普通函数可以是具名函数也可以是匿名函数</li></ul><h2 id="箭头函数的this会指向什么" tabindex="-1"><a class="header-anchor" href="#箭头函数的this会指向什么"><span>箭头函数的this会指向什么</span></a></h2><p>箭头函数this通常在创建的时候 就已经确定了指向，会指向外层的this</p><h2 id="以下this会指向什么" tabindex="-1"><a class="header-anchor" href="#以下this会指向什么"><span>以下this会指向什么</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">func</span><span class="token operator">:</span> fn
  <span class="token punctuation">}</span>
  obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="this会指向window-因为它声明的使用会指向外层的this" tabindex="-1"><a class="header-anchor" href="#this会指向window-因为它声明的使用会指向外层的this"><span>this会指向window，因为它声明的使用会指向外层的this</span></a></h4><p>如果箭头函数改成普通函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token literal-property property">func</span><span class="token operator">:</span> fn
  <span class="token punctuation">}</span>
  obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="此时还是指向obj函数会根据执行时-谁调用了它而指向谁" tabindex="-1"><a class="header-anchor" href="#此时还是指向obj函数会根据执行时-谁调用了它而指向谁"><span>此时还是指向obj函数会根据执行时，谁调用了它而指向谁</span></a></h4><p>如果箭头函数上加上bin，this会指向什么 依旧指向window，因为箭头函数不可改变this的指向</p><h2 id="_10-var和let有什么区别" tabindex="-1"><a class="header-anchor" href="#_10-var和let有什么区别"><span>10：var和let有什么区别</span></a></h2><ul><li>var和let 都有变量提升，但是let有一个暂时性死区</li><li>var 是函数作用域 let是块级作用域</li><li>var 可以重复声明，而let不行</li></ul><h2 id="_11-es6-有哪些新的特性" tabindex="-1"><a class="header-anchor" href="#_11-es6-有哪些新的特性"><span>11：ES6 有哪些新的特性</span></a></h2><ul><li>类class，extends</li><li>箭头函数</li><li>let const</li><li>模板字符串</li><li>扩展运算符...</li><li>解构赋值</li><li>import/export</li><li>Promise</li><li>Symbol</li><li>Proxy</li><li>函数参数默认值</li></ul><h2 id="_13-json-parse和json-stringify的实现" tabindex="-1"><a class="header-anchor" href="#_13-json-parse和json-stringify的实现"><span>13：Json.parse和Json.stringify的实现</span></a></h2><h5 id="json-stringify-是将对象或值转换为json字符串-json-parse-解析json-字符串-就是把json字符串转成对象" tabindex="-1"><a class="header-anchor" href="#json-stringify-是将对象或值转换为json字符串-json-parse-解析json-字符串-就是把json字符串转成对象"><span>json.stringify() 是将对象或值转换为JSON字符串 ; json.parse() 解析JSON 字符串，就是把JSON字符串转成对象</span></a></h5>`,58),u={href:"https://zhuanlan.zhihu.com/p/638767443",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="_14-如何实现路由懒加载" tabindex="-1"><a class="header-anchor" href="#_14-如何实现路由懒加载"><span>14：如何实现路由懒加载？</span></a></h2><p>在router 通过回调的方式引入组件就可以实现异步加载 原理： 主要是因为javascript 运行机制、事件循环以及打包工具的配合</p><ul><li>当打包工具遇到import的时候会把这些组件当做单独js文件进行打包</li><li>页面加载的时候，只有主要boundle会被下载</li><li>当用户需要组件的时候，再发起网络请求，请求对应的异步组件</li><li>然后进行下载和执行</li><li>最后渲染</li></ul><h2 id="如何让你在数组中查找元素你会如何实现" tabindex="-1"><a class="header-anchor" href="#如何让你在数组中查找元素你会如何实现"><span>如何让你在数组中查找元素你会如何实现</span></a></h2><p>如果是基础类型的数组 考虑使用 indexOf进行查找 如果是对象数组 则使用findIndex进行查找</p><h2 id="call-apply-bind的区别" tabindex="-1"><a class="header-anchor" href="#call-apply-bind的区别"><span>call apply bind的区别</span></a></h2><ul><li><p>传递参数的方式 call 以参数列表形式传递参数 func.call(context, arg1, arg2, ...); apply 以数组形式传递参数 func.call(context, [arg1, arg2, ...]); bind 创建表一个新的函数，并以参数列表的形式传递参数，但不会立即执行原函数 const newFunc = func.bind(context,agr1,agr2,...)</p></li><li><p>立即执行和返回新函数 call/apply 立即执行原函数 bind 不会立即执行原函数，而是返回一个新函数，可以稍后调用</p></li><li><p>返回值 call/apply 返回原函数执行结果 const result = func.call(context, arg1, arg2, ...); bind 返回新函数，需要调用这个新函数才能获取结果 const newFunc = func.call(context, arg1, arg2, ...); const result = newFunc()</p></li><li><p>使用场景 call 和 apply 主要用于借用其他对象的方法，或者在一个对象上调用一个函数，同时指定该函数内部的 this 值。 bind： 主要用于创建一个与原函数拥有相同 this 值的新函数，方便稍后调用。</p></li><li><p>性能： call 和 apply由于立即执行原函数，可能略微更高效，但在大多数情况下性能差异微乎其微。 bind 创建了一个新的函数，性能可能稍差一些，但同样在大多数情况下不会引起明显的性能问题。</p></li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

 <span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token function">getValue</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出: 44</span>
 <span class="token function">getValue</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: 44</span>

 <span class="token keyword">const</span> boundFunc <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">boundFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 输出: 44</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="new-string-123-和string-123-new-string-123-string-123-吗-typeof判断这两个是什么" tabindex="-1"><a class="header-anchor" href="#new-string-123-和string-123-new-string-123-string-123-吗-typeof判断这两个是什么"><span>new String(&#39;123&#39;)和String(&#39;123&#39;) new String(&#39;123&#39;)==String(&#39;123&#39;)吗，typeof判断这两个是什么</span></a></h2><pre><code>两种定义方式的不同
1.字符串常量存储在字符串常量池，目的是共享。
2.字符串非常量值对象存储在堆中。

 不相等
typeof(new String(&#39;123&#39;)) 为object typeof(&#39;123&#39;) string
</code></pre><h2 id="indexof-和-includes有什么区别" tabindex="-1"><a class="header-anchor" href="#indexof-和-includes有什么区别"><span>indexOf 和 includes有什么区别</span></a></h2><ul><li>indexOf是返回下标，如果找到返回对应下标如果没有则返回-1</li><li>includes返回值是true 和 false</li><li>indexOf 是严格等于 相当于（===），includes是使用零等值法 0可以等于-0 特别说明indexOf中NAN永远返回-1，而includes NAN可以是true</li></ul><h2 id="typeof-和instanceof的区别" tabindex="-1"><a class="header-anchor" href="#typeof-和instanceof的区别"><span>typeof 和instanceof的区别</span></a></h2><ul><li>都是用来判断变量是否为空，或者属于什么数据类型</li><li>typeof返回的是一个字符串，用来判断是什么数据类型</li><li>instanceof 返回的是一个布尔值，用来判断一个变量是否属于对象上的实例</li><li>typeof检测的是简单数据类型， instanceof 检测的是引用数据类型</li></ul><h2 id="浏览器的宏任务与微任务是什么" tabindex="-1"><a class="header-anchor" href="#浏览器的宏任务与微任务是什么"><span>浏览器的宏任务与微任务是什么</span></a></h2><p>微任务优先于宏任务</p><ul><li>宏任务 宏任务是由浏览器发起的任务，通常包括整体代码、setTimeout、setInterval、I/O 操作等。宏任务会被添加到宏任务队列中，等待浏览器的执行 宏任务执行完毕后，会清空微任务队列</li><li>微任务 微任务是在宏任务执行完毕后立即执行的任务。微任务通常包括 Promise 的回调、MutationObserver 等 微任务队列有自己的执行时机，在每个宏任务执行完毕后，会检查微任务队列并执行其中的所有任务。</li></ul><h2 id="堆和栈" tabindex="-1"><a class="header-anchor" href="#堆和栈"><span>堆和栈</span></a></h2><ul><li>堆（堆内存） 用于动态分配内区的区域，用于存储引用类型，如对象和数组 （在堆中分配的内存不会自动释放，需要通过垃圾回收机制来回收不再使用的内存。堆的大小通常比栈大，并且可以动态增长和收缩。）</li><li>栈 同于管理函数执行上下文和存储基本类型值的一种数据结构 （每当执行一个函数时，都会在栈中创建一个新的执行上下文，包括函数的参数、局部变量和函数的返回地址。当函数执行完成后， 对应的执行上下文会被销毁，栈会自动释放相关的内存。栈的大小通常比较小且固定，内存分配由系统自动管理。）</li></ul><p>区别 - 存储内容：堆用于存储引用类型的数据，如对象和数组；栈用于存储基本类型的数据，如布尔值、数值和字符串，以及函数执行的上下文。 - 分配方式：堆通过动态分配内存来存储数据；栈通过在执行上下文中的栈帧上分配固定大小的内存来存储数据。 - 大小和生长性：堆的大小通常比栈大，可以动态增长和收缩；栈的大小通常比较小且固定，由系统自动管理。 - 管理方式：堆的内存管理需要使用垃圾回收机制来回收不再使用的内存；栈的内存管理由系统自动处理，通过栈指针的移动来分配和释放内存。 - 生命周期：堆中分配的内存不会自动释放，需要通过垃圾回收来回收内存；栈中的内存由系统自动管理，在函数执行完成后自动释放。</p><h2 id="排序" tabindex="-1"><a class="header-anchor" href="#排序"><span>排序</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 请将数组排序从小到大</span>
  <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span>
  array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;排序后的数组&#39;</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="去重" tabindex="-1"><a class="header-anchor" href="#去重"><span>去重</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">===</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扁平化" tabindex="-1"><a class="header-anchor" href="#扁平化"><span>扁平化</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      a <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
      arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是柯里化函数-你对柯里化了解多少" tabindex="-1"><a class="header-anchor" href="#什么是柯里化函数-你对柯里化了解多少"><span>什么是柯里化函数，你对柯里化了解多少？</span></a></h2><h4 id="柯里化-柯里化是一个高阶函数-它可以将多个形参的函数转成单一的形参的函数" tabindex="-1"><a class="header-anchor" href="#柯里化-柯里化是一个高阶函数-它可以将多个形参的函数转成单一的形参的函数"><span>柯里化： 柯里化是一个高阶函数,它可以将多个形参的函数转成单一的形参的函数</span></a></h4><h4 id="代码实现-其实柯里化函数的核心点主要在args-length和fn-length的判断-当传入的参数个小小于原始函数的参数个数-则继续柯里化" tabindex="-1"><a class="header-anchor" href="#代码实现-其实柯里化函数的核心点主要在args-length和fn-length的判断-当传入的参数个小小于原始函数的参数个数-则继续柯里化"><span>代码实现:其实柯里化函数的核心点主要在args.length和fn.length的判断，当传入的参数个小小于原始函数的参数个数，则继续柯里化</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> _args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>_args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token operator">...</span>_args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom"><span>虚拟dom</span></a></h2><p>虚拟dom是用来表现真实dom结果的javaScript对象树，是构建在浏览器真实dom上的抽象层，虚拟dom是可以直接在内存中操作的，可以通过diff算法来对比新旧dom 差异，将最终变化应用到真实dom上</p><h2 id="diff算法原理" tabindex="-1"><a class="header-anchor" href="#diff算法原理"><span>diff算法原理</span></a></h2><p>diff算法又称虚拟Dom的周界算法，vue的diff算法是通过深度优先、先序遍历的方式进行的，它将前后两个虚拟Dom树进行逐层比较，当找到某一层不一样的节点时，停止下降，然后比较这些节点的子节点，当所有的子节点都完成比较之后，算法会由下至上进行回溯，此过程被称为执行patch操作。在执行patch操作时，Vue对于不同类型的节点的更新方式也不同，对于元素节点可以更新他的属性和子节点；对于文本节点，只能更新它的文本内容；对于每个子节点，如果key值相同，可以进行复用或者重新排序，或者将其他的节点移动到这个位置。</p><p>diff算法主要采用深度优先算法，逐层进行比较，具体实现如下</p><ul><li>首先会有两个虚拟DOM树，分为新的子节点集合，旧子节点集合</li><li>同时会有4个索引分别指向，新子节点的首尾，旧的子节点首尾4个（这里以oldS,oldE,newS,newE）代表</li><li>比较的话 就是oldS和oldE 分别对newS、newE进行比较就有四种情况了</li></ul><p>####相等情况分为4种</p><ul><li>oldS（旧节点的头）和newS （新节点的头）相等，那么oldS 和 newS 分别索引+1</li><li>oldS（旧节点的头）和newE （新节点的尾）相等，那么就是oldS +1 然后newE -1</li><li>oldE（旧节点的尾）和newS （新节点的尾）相等，那么oldE 和 newE 分别索引 +1</li><li>oldE（旧节点的尾）和newS （新节点的头）相等，那么就是oldE -1 然后 newS +1</li></ul><p>最后会出现一种情况，就是如果存在不相等的节点的时候 会有两种结果</p><ul><li>new的子节点集合大于 旧的子节点集合，添加新的子节点</li><li>旧的节点集合大于新的节点集合，那么就会真实DOM中（不是在旧节点）删除多余的子节点</li></ul>`,43);function k(h,v){const s=t("ExternalLinkIcon");return l(),p("div",null,[r,n("p",null,[n("a",u,[i("具体答案：一文彻底弄懂JSON.parse()与JSON.stringify()"),o(s)])]),d])}const m=e(c,[["render",k],["__file","04.篇章4.html.vue"]]),g=JSON.parse(`{"path":"/posts/Study/04.%E7%AF%87%E7%AB%A04.html","title":"篇章4","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-28T08:00:00.000Z","category":["篇章4"],"tag":["基础 优化"],"star":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"SSR实现原理","slug":"ssr实现原理","link":"#ssr实现原理","children":[]},{"level":2,"title":"1:SSR渲染流程是什么样？","slug":"_1-ssr渲染流程是什么样","link":"#_1-ssr渲染流程是什么样","children":[]},{"level":2,"title":"2:浏览器从输入到渲染的过程经历哪些过","slug":"_2-浏览器从输入到渲染的过程经历哪些过","link":"#_2-浏览器从输入到渲染的过程经历哪些过","children":[]},{"level":2,"title":"3: 说说网络错误码有哪些？ 分别代表什么意思","slug":"_3-说说网络错误码有哪些-分别代表什么意思","link":"#_3-说说网络错误码有哪些-分别代表什么意思","children":[]},{"level":2,"title":"4:如何解决页面刷新丢失数据的问题？","slug":"_4-如何解决页面刷新丢失数据的问题","link":"#_4-如何解决页面刷新丢失数据的问题","children":[]},{"level":2,"title":"4: 后台系统中权限是实现到什么等级? 具体怎么实现的","slug":"_4-后台系统中权限是实现到什么等级-具体怎么实现的","link":"#_4-后台系统中权限是实现到什么等级-具体怎么实现的","children":[]},{"level":2,"title":"6: for in 循环对象的时候是有序的吗","slug":"_6-for-in-循环对象的时候是有序的吗","link":"#_6-for-in-循环对象的时候是有序的吗","children":[]},{"level":2,"title":"7: 前端做过哪些优化","slug":"_7-前端做过哪些优化","link":"#_7-前端做过哪些优化","children":[]},{"level":2,"title":"8: 前端图片懒加载的原理","slug":"_8-前端图片懒加载的原理","link":"#_8-前端图片懒加载的原理","children":[]},{"level":2,"title":"9: 箭头函数和普通函数的区别？","slug":"_9-箭头函数和普通函数的区别","link":"#_9-箭头函数和普通函数的区别","children":[]},{"level":2,"title":"箭头函数的this会指向什么","slug":"箭头函数的this会指向什么","link":"#箭头函数的this会指向什么","children":[]},{"level":2,"title":"以下this会指向什么","slug":"以下this会指向什么","link":"#以下this会指向什么","children":[]},{"level":2,"title":"10：var和let有什么区别","slug":"_10-var和let有什么区别","link":"#_10-var和let有什么区别","children":[]},{"level":2,"title":"11：ES6 有哪些新的特性","slug":"_11-es6-有哪些新的特性","link":"#_11-es6-有哪些新的特性","children":[]},{"level":2,"title":"13：Json.parse和Json.stringify的实现","slug":"_13-json-parse和json-stringify的实现","link":"#_13-json-parse和json-stringify的实现","children":[]},{"level":2,"title":"14：如何实现路由懒加载？","slug":"_14-如何实现路由懒加载","link":"#_14-如何实现路由懒加载","children":[]},{"level":2,"title":"如何让你在数组中查找元素你会如何实现","slug":"如何让你在数组中查找元素你会如何实现","link":"#如何让你在数组中查找元素你会如何实现","children":[]},{"level":2,"title":"call apply bind的区别","slug":"call-apply-bind的区别","link":"#call-apply-bind的区别","children":[]},{"level":2,"title":"new String('123')和String('123') new String('123')==String('123')吗，typeof判断这两个是什么","slug":"new-string-123-和string-123-new-string-123-string-123-吗-typeof判断这两个是什么","link":"#new-string-123-和string-123-new-string-123-string-123-吗-typeof判断这两个是什么","children":[]},{"level":2,"title":"indexOf 和 includes有什么区别","slug":"indexof-和-includes有什么区别","link":"#indexof-和-includes有什么区别","children":[]},{"level":2,"title":"typeof 和instanceof的区别","slug":"typeof-和instanceof的区别","link":"#typeof-和instanceof的区别","children":[]},{"level":2,"title":"浏览器的宏任务与微任务是什么","slug":"浏览器的宏任务与微任务是什么","link":"#浏览器的宏任务与微任务是什么","children":[]},{"level":2,"title":"堆和栈","slug":"堆和栈","link":"#堆和栈","children":[]},{"level":2,"title":"排序","slug":"排序","link":"#排序","children":[]},{"level":2,"title":"去重","slug":"去重","link":"#去重","children":[]},{"level":2,"title":"扁平化","slug":"扁平化","link":"#扁平化","children":[]},{"level":2,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]},{"level":2,"title":"什么是柯里化函数，你对柯里化了解多少？","slug":"什么是柯里化函数-你对柯里化了解多少","link":"#什么是柯里化函数-你对柯里化了解多少","children":[]},{"level":2,"title":"虚拟dom","slug":"虚拟dom","link":"#虚拟dom","children":[]},{"level":2,"title":"diff算法原理","slug":"diff算法原理","link":"#diff算法原理","children":[]}],"git":{"createdTime":1711672807000,"updatedTime":1711939160000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":2}]},"readingTime":{"minutes":15.08,"words":4523},"filePathRelative":"posts/Study/04.篇章4.md","localizedDate":"2024年3月28日"}`);export{m as comp,g as data};
