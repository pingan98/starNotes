import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,b as s,d as c,f as l}from"./app-Dm9P7ZK8.js";const i={},u=l(`<h1 id="篇章2" tabindex="-1"><a class="header-anchor" href="#篇章2"><span>篇章2</span></a></h1><h2 id="防抖-节流" tabindex="-1"><a class="header-anchor" href="#防抖-节流"><span>防抖 节流</span></a></h2><h4 id="防抖-延迟一定时间执行某一方法-如果重新触发时间重置" tabindex="-1"><a class="header-anchor" href="#防抖-延迟一定时间执行某一方法-如果重新触发时间重置"><span>防抖： 延迟一定时间执行某一方法，如果重新触发时间重置</span></a></h4><h4 id="节流-是规定时间内多次触发方法只执行一次" tabindex="-1"><a class="header-anchor" href="#节流-是规定时间内多次触发方法只执行一次"><span>节流： 是规定时间内多次触发方法只执行一次</span></a></h4><h4 id="区别-一个是立即执行规定时间内不重复执行-一个是规定时间内只执行一次-其实区别可以不用回答-介绍防抖和节流就包含了区别" tabindex="-1"><a class="header-anchor" href="#区别-一个是立即执行规定时间内不重复执行-一个是规定时间内只执行一次-其实区别可以不用回答-介绍防抖和节流就包含了区别"><span>区别: 一个是立即执行规定时间内不重复执行，一个是规定时间内只执行一次，其实区别可以不用回答，介绍防抖和节流就包含了区别</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 防抖</span>
  <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">.</span><span class="token punctuation">.</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 节流</span>
  <span class="token keyword">function</span> <span class="token function">throttle</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">.</span><span class="token punctuation">.</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span>
      timer <span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h2><ul><li>使用json 序列号和反序列化<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> clone <span class="token operator">=</span> Json<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>Json<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>使用递归完成深拷贝 这种方式通过递归遍历原始对象，并对该对象的属性进行逐一深拷贝，以创建一个原对象独立副本<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> clonedObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      clonedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> clonedObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> deepClonedObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
deepClonedObj<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// { a: 1, b: { c: 2 } }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepClonedObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { a: 1, b: { c: 3 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>第三方库 lodash 库中的 _.cloneDeep 方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> deepClonedObj <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  deepClonedObj<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// { a: 1, b: { c: 2 } }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepClonedObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { a: 1, b: { c: 3 } }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="说说对于vite和webpack的理解" tabindex="-1"><a class="header-anchor" href="#说说对于vite和webpack的理解"><span>说说对于vite和webpack的理解</span></a></h2><ul><li>webpack 和 vite都是很好的打包工具,对于webpack,在大型项目中构建比较蛮,因为它需要对文件执行多次扫描和转译,从而衍生了vite,vite是以开发模式极速构建著称,它利用了ES模块 特性,只构建正在编译的模块,而不是项目,真正做到了按需引入</li><li>webpack 目前插件生态比较丰富,对于vite插件相对较少,同时对于项目的话个人认为webpack适合大型项目,vite适合中小型项目</li></ul><h2 id="如何把webpack迁移到vite" tabindex="-1"><a class="header-anchor" href="#如何把webpack迁移到vite"><span>如何把webpack迁移到vite</span></a></h2>`,13),r={href:"https://blog.csdn.net/x550392236/article/details/1337529323",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"import-和-require的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#import-和-require的区别"},[n("span",null,"import 和 require的区别")])],-1),d=n("ul",null,[n("li",null,"首先是标准不同 import/export 是ES6标准, require/module.exports 是CommonJS的标准"),n("li",null,"其次是执行过程 import是编译时执行异步加载,require是运行时才执行即同步加载"),n("li",null,"import会 提升到文件的顶部"),n("li",null,"require的性能会相对稍低于import")],-1);function v(m,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("引用"),n("a",r,[s("webpack迁移到vite"),c(a)])]),k,d])}const y=t(i,[["render",v],["__file","02.篇章2.html.vue"]]),w=JSON.parse('{"path":"/posts/Study/02.%E7%AF%87%E7%AB%A02.html","title":"篇章2","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-26T12:30:00.000Z","category":["篇章2"],"tag":["防抖 节流 vite和webpack import和require"],"star":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"防抖 节流","slug":"防抖-节流","link":"#防抖-节流","children":[]},{"level":2,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]},{"level":2,"title":"说说对于vite和webpack的理解","slug":"说说对于vite和webpack的理解","link":"#说说对于vite和webpack的理解","children":[]},{"level":2,"title":"如何把webpack迁移到vite","slug":"如何把webpack迁移到vite","link":"#如何把webpack迁移到vite","children":[]},{"level":2,"title":"import 和 require的区别","slug":"import-和-require的区别","link":"#import-和-require的区别","children":[]}],"git":{"createdTime":1711508155000,"updatedTime":1711617725000,"contributors":[{"name":"chengongtao","email":"chengongtao@unicheers.com","commits":5}]},"readingTime":{"minutes":2.02,"words":605},"filePathRelative":"posts/Study/02.篇章2.md","localizedDate":"2024年3月26日"}');export{y as comp,w as data};
